{"version":3,"sources":["components/utilities/Requests.js","reduxStore/actions/profile.js","reduxStore/actions/page.js","components/actions/LogIn.js","components/sidebar/Search.js","components/sidebar/Sidebar.js","components/actions/Register.js","reduxStore/actions/mongoDb.js","components/post/LikeButton.js","components/post/DeleteButton.js","components/post/Post.js","components/actions/SinglePage.js","components/Posts.js","components/HighlightedCompose/HC-textArea.js","components/HighlightedCompose/HC-buttons.js","components/HighlightedCompose/HC-suggestions.js","components/HighlightedCompose/HC.js","components/utilities/Errors.js","components/App.js","serviceWorker.js","reduxStore/reducers/mongoReducer.js","reduxStore/reducers/profileReducer.js","reduxStore/reducers/pageReducer.js","reduxStore/store.js","index.js"],"names":["getPostsRequest","a","message","axios","get","catch","err","response","data","getUsersRequest","logInRequest","userInfo","post","registerRequest","composeRequest","postInfo","deleteRequest","likeRequest","dislikeRequest","searchRequest","userPostsRequest","authorId","singlepostRequest","addCommentRequest","deleteCommentRequest","setProfileAction","profile","dispatch","getState","type","payload","setCurrentPageAction","page","currentPage","setErrorMessageAction","setSearchAction","text","setSearchResultsAction","setSinglePostAction","postId","connect","state","allUsers","mongoDb","reduXprofile","setProfile","console","log","userProfile","find","user","_id","error","localStorage","setItem","token","logInAction","setCurrentPage","setErrorMessage","props","useState","loginInfo","setLoginInfo","handleSubmit","event","preventDefault","name","password","onSubmit","className","onKeyDown","e","keyCode","placeholder","onChange","target","value","toLowerCase","trim","onClick","allPosts","search","setSearch","setSearchResults","SearchInputText","setSearchInputText","getSearchResults","searchText","final","filter","i","length","useEffect","handleSearch","reduXcurrentPage","removeProfile","handleLogoClick","twitterLogo","searchField","_","isEmpty","style","background","color","removeItem","registerUser","registerUserAction","registerInfo","setRegisterInfo","rePasswordEl","useRef","rePassword","passwordsDontMatch","nameHasBlank","split","includes","current","backgroundColor","ref","triangle","onChangeComplete","hex","updateAllPostsAction","updateAllPosts","addLikeRequest","tokenPostInfo","addLikeAction","removeLikeRequest","removeLikeAction","setSinglePost","userDidntLikedBefore","likes","userLikedBefore","cursor","opacity","deletePostRequest","deletePostAction","handleDeleteClick","getFullDate","postDate","d","Date","date","getMonth","getDate","getFullYear","timeHours","getHours","timeMinutes","getMinutes","ampm","getUserPosts","getUserPostsAction","authorProfile","foundUser","postClick","hashtagClick","hashtag","comments","postText","map","word","startsWith","mentioned","substring","getFinalText","singlePost","results","commentText","setCommentText","handleComment","commentPayload","form","handleDeleteComment","commentId","allComments","comment","author","borderRight","searchResults","addPost","postsToShow","slice","reverse","key","setCompose","setSuggested","hashtagTakingAction","setHashtagTakingAction","mentionTakingAction","setMentionTakingAction","hashtagValue","setHashtagValue","mentionValue","setMentionValue","textAreaEl","document","designMode","execCommand","setTimeout","focus","userFound","userStyle","mentionHash","setMentionHash","possible","contentEditable","class","onKeyUp","letter","match","innerText","compose","server_composeRequest","Suggestions","suggested","HighlightedCompose","suggestionExists","reduXerrorMessage","errorMessage","updateAllUsers","requestedUsers","requestedPosts","storediD","getItem","storedToken","f","currentComponent","Boolean","window","location","hostname","initialState","postReducer","action","profileReducer","pageReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","combineReducers","mongoReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c69d6359.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const getPostsRequest = async () => {\n    let message = '' ;\n    const response = await axios.get('/api/posts')\n    .catch(err => message = `Error: , ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const getUsersRequest = async () => {\n    let message = '' ;\n    const response = await axios.get('/api/users')\n    .catch(err => message = `Error: , ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const logInRequest = async (userInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/login', userInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const registerRequest = async (userInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/users', userInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const composeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/posts', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const deleteRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/delete', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const likeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/like', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const dislikeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/dislike', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const searchRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/search', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const userPostsRequest = async (authorId) => {\n    let message = '' ;\n    const response = await axios.post('/api/userPosts', authorId)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const singlepostRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.get(`/api/post/${postInfo}`)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const addCommentRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post(`/api/comments`, postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const deleteCommentRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post(`/api/deletecomment`, postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}","import {registerRequest, logInRequest} from '../../components/utilities/Requests'\n\nexport const setProfileAction = (profile) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'ADD_PROFILE',\n\t\t\tpayload: profile\n\t\t})\n\t}\n}\n\nexport const removeProfileAction = (profile) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({ type: 'REMOVE_PROFILE' })\n\t}\n}\n\nexport const logInAction = (profile) => {\n\treturn async (dispatch, getState) => {\n\t\tconst response = await logInRequest(profile)\n\t\tif(typeof(response)=='string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log('Log in was successful')\n\t\t\tconst allUsers = getState().mongoDb.allUsers\n\n\t\t\tlet userProfile\n\t\t\ttry {\n\t\t\t\tuserProfile = allUsers.find(user=> user._id === response._id)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\n\t\t\tlocalStorage.setItem('storediD', response._id);\n\t\t\tlocalStorage.setItem('storedToken', response.token);\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: {...userProfile, token: response.token}\n\t\t\t})\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\t\tcurrentPage: 'posts'\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const registerUserAction = (profile) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response = await registerRequest(profile)\n\n\t\tif(typeof(response)=='string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log('Registration was successful')\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t}\n}","import {singlepostRequest, userPostsRequest} from '../../components/utilities/Requests'\n\nexport const setCurrentPageAction = (page) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\tcurrentPage: page\n\t\t})\n\t}\n}\n\nexport const setErrorMessageAction = (message) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\tmessage: message\n\t\t})\n\t}\n}\n\nexport const setSearchAction = (text) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH',\n\t\t\ttext: text\n\t\t})\n\t}\n}\n\nexport const setSearchResultsAction = (payload) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH_RESULTS',\n\t\t\tpayload: payload\n\t\t})\n\t}\n}\n\nexport const getUserPostsAction = (authorId) => {\n\treturn async (dispatch, getState) => {\n\t\tconst response =  await userPostsRequest({authorId:authorId})\n\n\t\tif(typeof response === 'string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('User\\'s Posts were retreived.')\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_SEARCH_RESULTS',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const setSinglePostAction = (postId) => {\n\tif(postId){\n\t\treturn async (dispatch, getState) => {\n\t\t\tconst response = await singlepostRequest(postId)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_SINGLE_POST',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t} else {\n\t\treturn (dispatch, getState) => {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_SINGLE_POST',\n\t\t\t\tpayload: null\n\t\t\t})\n\t\t}\n\t}\n}\n","import React, {useState} from 'react';\nimport '../../styles/LogIn.css';\n\nimport {connect} from 'react-redux'\nimport {setProfileAction, logInAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\n\nconst LogIn = props => {\n    const {setCurrentPage, setErrorMessage, logInRequest} = props\n    const [loginInfo, setLoginInfo] = useState();\n\n    const handleSubmit = event =>{\n        event.preventDefault()\n        const everythingNotFilled = !loginInfo || !loginInfo.name || !loginInfo.password;\n\n        if(everythingNotFilled){\n            setErrorMessage('Error: You have to fill out both fields')\n        }\n        else {\n\t\t\tsetErrorMessage(null)\n            logInRequest(loginInfo)\n        }\n    }\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='loginForm' onKeyDown={onEnterPress}>\n            <input\n                type='text'\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                onChange={(e)=> setLoginInfo({\n                    ...loginInfo,\n                    name:e.target.value.toLowerCase().trim()\n                })}\n            />\n\n            <input\n                type='password'\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                onChange={(e)=> setLoginInfo({\n                    ...loginInfo,\n                    password:e.target.value.trim()\n                })}\n            />\n\n            <div className='btns'>\n                <button className='btns' onClick={()=> {\n                    setErrorMessage(null)\n                    setCurrentPage('posts')\n                    }}> Cancel </button>\n                <button className='btns submit' type=\"submit\">Submit</button>\n            </div>\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        logInRequest: profile => dispatch(logInAction(profile)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn)","import React, {useEffect, useState} from 'react'\nimport {searchRequest} from '../utilities/Requests'\nimport {connect} from 'react-redux'\nimport {setErrorMessageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nconst Search = props => {\n    const {setErrorMessage, setSearch, search, allPosts, setSearchResults} = props\n\n    const [SearchInputText, setSearchInputText] = useState()\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const getSearchResults = async searchText => {\n        console.log(`Searching for posts with ${searchText} hashtag`)\n        const response = await searchRequest({\n            payload : searchText.toLowerCase()\n        })\n\n        if(typeof response === 'string'){\n            console.log(response)\n            setErrorMessage(response)\n        } else {\n            setErrorMessage(null)\n\n            // eslint-disable-next-line array-callback-return\n            const final = allPosts.filter(post => {\n                for(let i=0; i<response.length; i++){\n                    if (response[i] === post._id){\n                        return post\n                    }\n                }\n            })\n\n            setSearchResults(final)\n        }\n    }\n\n    useEffect(()=>{\n        if(search === ''){\n            setSearch(null)\n            setSearchResults(null)\n        } else if(search) {\n            getSearchResults(search)\n        }\n    }, [getSearchResults, search, setSearch, setSearchResults])\n\n    const handleSearch = async e =>{\n        e.preventDefault()\n        console.log(`search submitted ${SearchInputText}`)\n        setSearch(SearchInputText)\n    }\n\n    return (\n        <form onSubmit={handleSearch}>\n            <input\n                type='text'\n                name='search'\n                placeholder=\"Search for Hashtag here\"\n                onChange = {text =>{\n                    setSearchInputText(text.target.value)\n                }}\n                value={SearchInputText}\n            />\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        search: state.page.search\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setErrorMessage: message => dispatch(setErrorMessageAction(message)),\n        setSearch: text => dispatch(setSearchAction(text)),\n        setSearchResults: payload => dispatch(setSearchResultsAction(payload))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search)","import React from 'react'\nimport _ from 'lodash'\nimport '../../styles/Sidebar.css';\nimport Search from './Search'\nimport {connect} from 'react-redux'\nimport {FaTwitter} from 'react-icons/fa'\nimport {removeProfileAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nconst Sidebar = props =>{\n    const {reduXprofile, reduXcurrentPage} = props\n    const {removeProfile, setCurrentPage, setSearch, setSearchResults, setErrorMessage} = props\n\n\n    const handleLogoClick = e =>{\n        e.preventDefault()\n        setSearch(null)\n        setSearchResults(null)\n        setErrorMessage(null)\n        setCurrentPage('posts')\n    }\n\n    const twitterLogo = <div className='page-logo' onClick={handleLogoClick}> <FaTwitter/> </div>\n    const searchField = <Search />\n\n\n    // if not logged in and posts page\n    // show login/register button\n    if( _.isEmpty(reduXprofile) &&\n        (reduXcurrentPage==='posts' || reduXcurrentPage==='single-page')\n    ){\n        return (\n        <>\n            {twitterLogo}\n            <button className=\"login-btn\" onClick={()=>setCurrentPage('log-in')}>Log In </button>\n            <button className=\"register-btn\" onClick={()=>setCurrentPage('register') }>Register </button>\n            {searchField}\n        </>\n        )\n    }\n\n    // if login, register, or compose\n    // show current page label\n    else if(\n        reduXcurrentPage==='log-in'||\n        reduXcurrentPage==='register'||\n        reduXcurrentPage==='compose'\n        ){\n        return(\n        <>\n            {\n            reduXcurrentPage!=='compose'?\n            twitterLogo :\n            <div\n                className='profile-name compose-profile-name'\n                onClick={handleLogoClick}\n                style={{background: reduXprofile.color}}\n            >\n            {reduXprofile.name}\n            </div>\n            }\n            <div className=\"page-label\">\n            {reduXcurrentPage==='log-in'? 'Log In': reduXcurrentPage}\n            </div>\n        </>\n        )\n    }\n\n    // else person is logged in\n    // so show the profile on the page\n    // with logout and compose button\n    else{\n        return (\n        <div className='profile'>\n            <div\n                className='profile-name'\n                onClick={handleLogoClick}\n                style={{background: reduXprofile.color}}\n            >\n            {reduXprofile.name}\n            </div>\n\n        <button onClick={()=>setCurrentPage('compose')}> Compose </button>\n\n        <button onClick={()=>{\n            console.log('Logged out.')\n            removeProfile()\n            localStorage.removeItem('storediD');\n            localStorage.removeItem('storedToken');\n            setErrorMessage('You are now logged out. Hope to see you again soon.')\n            setCurrentPage('posts')\n            }}> Log Out</button>\n\n            {searchField}\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        reduXcurrentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        removeProfile: () => dispatch(removeProfileAction()),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setSearch: text => dispatch(setSearchAction(text)),\n        setSearchResults: payload => dispatch(setSearchResultsAction(payload)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar)","import React, {useState, useRef} from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {connect} from 'react-redux'\nimport '../../styles/Register.css';\nimport {setProfileAction, registerUserAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Register = props => {\n    const {registerUser, setCurrentPage, setErrorMessage} = props\n    const [registerInfo, setRegisterInfo] = useState();\n    const rePasswordEl = useRef();\n\n    // when submit button is pressed\n    const handleSubmit = event => {\n        event.preventDefault()\n\n        const everythingNotFilled = !registerInfo || !registerInfo.name || !registerInfo.password || !registerInfo.rePassword || !registerInfo.color;\n\n        if(everythingNotFilled){\n            setErrorMessage('Error: You have to fill out all fields')\n        }\n        else {\n            const passwordsDontMatch = registerInfo.password !== registerInfo.rePassword\n\n            const nameHasBlank = registerInfo.name.split('').includes(' ')\n\n            if(passwordsDontMatch){\n                rePasswordEl.current.style.backgroundColor = \"#FFE1E1\";\n                setErrorMessage('Error: Passwords do not match')\n            }\n            else if(nameHasBlank) {\n                setErrorMessage('Error: Name can\\'t have any spaces')\n            }\n            else {\n                rePasswordEl.current.style.backgroundColor = \"white\";\n                setErrorMessage('')\n                setCurrentPage('posts')\n                registerUser(registerInfo)\n            }\n        }\n    }\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='registerForm' onKeyDown={onEnterPress}>\n            <input\n                type='text'\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    name : e.target.value.toLowerCase().trim()\n                })}\n            />\n            <input\n                type='password'\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    password : e.target.value.trim()\n                })}\n            />\n            <input\n                type='password'\n                name=\"rePassword\"\n                ref={rePasswordEl}\n                placeholder=\"Re-enter your password\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    rePassword : e.target.value.trim()\n                })}\n            />\n\n            <div className='color-btns'>\n                <div className='color-btns-label'>\n                    <p> Choose a color: </p>\n                </div>\n                <div className='color-btns-choices'>\n                <TwitterPicker\n                    triangle='hide'\n                    onChangeComplete={(color, event)=>{\n                        setRegisterInfo({\n                            ...registerInfo,\n                            color : color.hex\n                        })\n                }}/>\n                </div>\n            </div>\n\n\n            <div className='btns'>\n                <button onClick={()=> {\n                    setCurrentPage('posts')\n                    setErrorMessage(null)\n                    }}> Cancel </button>\n                <button className='btns submit'type='submit'>Submit</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        registerUser: profile => dispatch(registerUserAction(profile)) ,\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","import {getPostsRequest, getUsersRequest, deleteRequest, likeRequest, dislikeRequest} from '../../components/utilities/Requests'\n\nexport const updateAllPostsAction = () => {\n\treturn async (dispatch, getState) => {\n\t\tlet response\n\t\ttry {\n\t\t\tresponse =  await getPostsRequest()\n\t\t} catch(e) {\n\t\t\tconsole.log(e);\n\t\t}\n\n\t\tif(typeof response === 'string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'UPDATE_ALL_POSTS',\n\t\t\t\tpayload: []\n\t\t\t})\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tdispatch({\n\t\t\t\ttype: 'UPDATE_ALL_POSTS',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const updateAllUsersAction = () => {\n\treturn async (dispatch, getState) => {\n\n\t\tlet requestedUsers\n\t\ttry {\n\t\t\trequestedUsers =  await getUsersRequest()\n\t\t} catch(e) {\n\t\t\tconsole.log(e);\n\t\t}\n\n\t\tif(typeof requestedPosts === 'string'){\n\t\t\tconsole.log('There was a connection error with the DB.')\n\t\t\trequestedUsers= []\n\t\t}\n\n\t\t// console.log(requestedUsers)\n\n\t\tconst storediD = localStorage.getItem('storediD');\n\t\tconst storedToken = localStorage.getItem('storedToken');\n\n\t\tif(storediD){\n\t\t\tlet f\n\t\t\ttry {\n\t\t\t\tf = requestedUsers.find(user=> user._id === storediD)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: {...f, token:storedToken}\n\t\t\t})\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: 'UPDATE_ALL_USERS',\n\t\t\tpayload: requestedUsers\n\t\t})\n\t}\n}\n\n//\n// SINGLE POST\n//\n\nexport const deletePostAction = (tokenPostInfo) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response =  await deleteRequest(tokenPostInfo)\n\n\t\tif(response !== 'OK'){\n\t\t\tconsole.log(response)\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Post was successfully deleted.')\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\t\tcurrentPage: 'posts'\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const addLikeAction = (tokenPostInfo) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response = await likeRequest(tokenPostInfo)\n\n\t\tif(response !== 'OK'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Like was added.')\n\t\t}\n\t}\n}\n\nexport const removeLikeAction = (tokenPostInfo) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response = await dislikeRequest(tokenPostInfo)\n\n\t\tif(response !== 'OK'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Like was removed.')\n\t\t}\n\t}\n}","import React from 'react'\nimport { FaRegHeart } from \"react-icons/fa\"\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction, addLikeAction, removeLikeAction} from '../../reduxStore/actions/mongoDb'\nimport {setSinglePostAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst LikeButton = props => {\n    const {reduXprofile, updateAllPosts, currentPage, setSinglePost} = props\n    const {post, addLikeRequest, removeLikeRequest, setErrorMessage} = props;\n\n    // if user is able to like, make it red\n    let style = {};\n\n    const userDidntLikedBefore = reduXprofile && post.authorId !== reduXprofile._id && !post.likes.includes(reduXprofile._id)\n\n    const userLikedBefore = reduXprofile && post.authorId !== reduXprofile._id && post.likes.includes(reduXprofile._id)\n\n    if(userDidntLikedBefore){\n        style = {color:'black', cursor:'pointer', opacity:1}\n    }\n\n    else if(userLikedBefore){\n        style = {color:'red', cursor:'pointer', opacity:1}\n    }\n\n    return (\n        <button className=\"like\" onClick={ async event => {\n            if(!reduXprofile){\n                setErrorMessage('Please log in to be able to like a post')\n            }\n            else if(userDidntLikedBefore){\n                await addLikeRequest({\n                    token:reduXprofile.token,\n                    _id:post._id\n                })\n            }\n            else if(userLikedBefore){\n                await removeLikeRequest({\n                    token:reduXprofile.token,\n                    _id:post._id\n                })\n            }\n\n            // reload the page\n            if(currentPage === 'posts'){\n                await updateAllPosts()\n            }\n            else if(currentPage === 'single-page') {\n                await setSinglePost(post._id)\n            }\n        }} style={style}>\n            <label>{post.likes.length}</label>\n            <FaRegHeart className='heart'/>\n        </button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        currentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateAllPosts: () => dispatch(updateAllPostsAction()),\n        addLikeRequest: (tokenPostInfo) => dispatch(addLikeAction(tokenPostInfo)),\n        removeLikeRequest: (tokenPostInfo) => dispatch(removeLikeAction(tokenPostInfo)),\n        setSinglePost: postId => dispatch(setSinglePostAction(postId)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LikeButton)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction, deletePostAction} from '../../reduxStore/actions/mongoDb'\nimport {setCurrentPageAction} from '../../reduxStore/actions/page'\n\nconst DeleteButton = props => {\n    const {reduXprofile, updateAllPosts, deletePostRequest} = props\n    const {post} = props\n\n    // handle delete button pressed\n    const handleDeleteClick = async e => {\n        e.preventDefault()\n        await deletePostRequest({\n            token:reduXprofile.token,\n            _id:post._id\n        })\n        updateAllPosts()\n    }\n\n    return (\n        <button\n            className=\"delete\"\n            onClick={handleDeleteClick}>\n        Delete\n        </button>\n        )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateAllPosts: () => dispatch(updateAllPostsAction()),\n        deletePostRequest: (tokenPostInfo) => dispatch(deletePostAction(tokenPostInfo)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteButton)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {FaRegCommentAlt} from 'react-icons/fa'\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport {setSearchAction, setCurrentPageAction, setSinglePostAction, getUserPostsAction} from '../../reduxStore/actions/page'\nimport {updateAllPostsAction} from '../../reduxStore/actions/mongoDb'\n\nconst Post = props => {\n    const {setSearch, allUsers, reduXprofile, setCurrentPage, setSinglePost, currentPage, getUserPosts} = props\n    const {post} = props\n\n    let authorProfile\n\n    if(allUsers && post){\n        try{\n            const foundUser = allUsers.filter(user => user._id === post.authorId)\n            authorProfile= foundUser[0]\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    if(!authorProfile){\n        authorProfile = {\n            name:'User no longer exists',\n            color: 'red'\n        }\n    }\n\n\n    const getFinalText = (postText, allUsers) => {\n        return (\n            <>\n            {postText.split(/\\s+/).map(word => {\n\n                if(word.startsWith('#')){\n                    return (\n                        <button\n                            onClick={()=>hashtagClick(word)}\n                            className='hashtag'\n                        >\n                        {`${word} `}\n                        </button>)\n                }\n                else if(word.startsWith('@')){\n                    let mentioned\n                    try {\n                        mentioned = allUsers.find(user=> user.name === word.toLowerCase().substring(1))\n                    } catch (error) {\n                        console.error(error);\n                    }\n\n                    let style={}\n\n                    if(mentioned){\n                        style = {background:mentioned.color, color: 'black'}\n                    }\n\n                    return (\n                        <button\n                            style={style}\n                            className='hashtag'\n                            onClick={()=>{\n                                getUserPosts(mentioned._id)\n                                if(currentPage !== 'posts'){\n                                    setCurrentPage('posts')\n                                }\n                            }}\n                        >\n                        {`${word} `}\n                        </button>)\n                }\n\n                else {\n                    return word + ' '\n                }\n            })}\n            </>\n        )\n    }\n\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    const postClick = async () => {\n        await setSinglePost(post._id)\n        setCurrentPage('single-page')\n    }\n\n    const hashtagClick = hashtag => {\n        setCurrentPage('posts')\n        setSinglePost(null)\n        setSearch(hashtag)\n    }\n\n    return (\n    <li className='post'>\n        <div className='post-header'>\n            <div\n                className='info-name'\n                onClick={()=>{\n                    getUserPosts(authorProfile._id)\n                    setSearch(null)\n                    if(currentPage !== 'posts'){\n                        setCurrentPage('posts')\n                    }\n                }}\n                >\n                <div\n                    className='icon-color'\n                    style={{background:authorProfile.color}}\n                />\n                <h3>{authorProfile.name}</h3>\n            </div>\n            <div className='like-comment-icons'>\n            {\n            currentPage==='posts'?\n            <el onClick={postClick} className='comments'>\n                <label> {post.comments?post.comments.length:0} </label>\n                <FaRegCommentAlt className='commentbox'/>\n            </el> : ''\n            }\n            <LikeButton post={post} />\n            </div>\n        </div>\n\n        <div className='post-body'>\n            <p className='text'>{getFinalText(post.payload, allUsers)}</p>\n        </div>\n\n        <div className='post-footer'>\n            <div className='date-comments'>\n                <p className='date'>{getFullDate(post.date)}</p>\n            </div>\n            {\n            reduXprofile && reduXprofile._id === post.authorId?\n            <DeleteButton post={post} /> : ''\n            }\n\n        </div>\n    </li>\n    )\n}\n\nconst getFullDate = (postDate) => {\n    const months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    const d = new Date(postDate)\n    const date =`${months[d.getMonth()]} ${d.getDate()}, ${d.getFullYear()}`\n    const timeHours = d.getHours() > 12 ? d.getHours() - 12 : d.getHours()\n    const timeMinutes = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes()\n    const ampm = d.getHours() >= 12 ? 'pm' : 'am';\n    return `${date} | ${timeHours}:${timeMinutes} ${ampm}`\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        currentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setSearch: text => dispatch(setSearchAction(text)),\n        getUserPosts: authorId => dispatch(getUserPostsAction(authorId)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        updateAllPosts: () => dispatch(updateAllPostsAction()),\n        setSinglePost: postId => dispatch(setSinglePostAction(postId))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","import React, {useState} from 'react'\nimport {connect} from 'react-redux'\nimport {addCommentRequest, deleteCommentRequest} from '../utilities/Requests'\nimport {setSinglePostAction, setCurrentPageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nimport Post from '../post/Post'\nimport '../../styles/SinglePage.css'\n\nconst SinglePage = props => {\n    const [commentText, setCommentText] = useState()\n    const {singlePost, profile, allUsers} = props\n    const {setSinglePost, setCurrentPage, setSearch, setSearchResults} = props\n\n    const handleComment = async e => {\n        e.preventDefault()\n\n        const commentPayload = {\n            token: profile.token,\n            _id: singlePost._id,\n            message: commentText.trim()\n        }\n\n        const response = await addCommentRequest(commentPayload)\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Comment was added.')\n            setCommentText('')\n            await setSinglePost(singlePost._id)\n        }\n\n    }\n\n    const form = (\n                <form onSubmit={handleComment}>\n                    <input\n                        type='text'\n                        name=\"comment\"\n                        className='comment-input'\n                        value={commentText}\n                        placeholder=\"Enter your comment here\"\n                        onChange={e=>setCommentText(e.target.value)}\n                    />\n                </form>\n                )\n\n    const handleDeleteComment = async commentId => {\n        const commentPayload = {\n            token: profile.token,\n            postId: singlePost._id,\n            commentId: commentId\n        }\n\n        const response = await deleteCommentRequest(commentPayload)\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Comment was added.')\n            await setSinglePost(singlePost._id)\n        }\n    }\n\n    const allComments = singlePost.comments?\n                        singlePost.comments.map(comment=>{\n\n                            let author\n                            if(allUsers){\n                                try {\n                                    author = allUsers.find(user=> user._id === comment.authorId)\n                                } catch (error) {\n                                    console.error(error);\n                                }\n                            }\n\n                            return (\n                            <div className='single-comment' style={{borderRight: `10px solid ${author.color}`}}>\n                                <div>\n                                    <span> {`${author.name}: `} </span>\n                                    {comment.message}\n                                </div>\n\n                                {\n                                profile && (comment.authorId === profile._id) ?\n                                <button\n                                    className='delete-comment'\n                                    onClick={e=>{\n                                        e.preventDefault()\n                                        handleDeleteComment(comment._id)\n                                    }}\n                                > Delete </button> : ''\n                                }\n\n                            </div>\n                            )\n                        }) : ''\n\n\n    return (\n        <div>\n\n            <div className='clear-page' onClick={()=>{\n                setSearch(null)\n                setSearchResults(null)\n                setCurrentPage('posts')\n                }}>\n                Back to All Posts\n            </div>\n\n            <Post post={singlePost} />\n\n            <div className='comments-page'>\n                <div className='comments-loop'>\n                    {allComments}\n                </div>\n                {profile? form : ''}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        singlePost: state.page.singlePost,\n        profile: state.profile,\n        allUsers: state.mongoDb.allUsers\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setSearch: results => dispatch(setSearchAction(results)),\n        setSearchResults: results => dispatch(setSearchResultsAction(results)),\n        setSinglePost: postId => dispatch(setSinglePostAction(postId)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePage)","import React from 'react';\nimport _ from 'lodash'\n\nimport Post from './post/Post'\nimport '../styles/Posts.css';\nimport {connect} from 'react-redux'\nimport {setSearchResultsAction, setSearchAction} from '../reduxStore/actions/page'\n\nconst Posts = props => {\n    const {allPosts, searchResults} = props\n    const {setSearchResults, setSearch, searchText} = props\n    const {addPost} = props\n\n    let postsToShow = allPosts;\n    if(searchResults) { postsToShow = searchResults }\n\n    if(!_.isEmpty(postsToShow) && typeof postsToShow !=='string'){\n        return (\n            <ul>\n\n            {\n                searchResults?\n                <div className='clear-page' onClick={()=>{\n                    setSearch(null)\n                    setSearchResults(null)\n                    }}>\n                    {\n                    searchText?\n                    `Clear Search for ${searchText}` :\n                    `Clear Search`\n                    }\n                </div> : ''\n            }\n\n            {\n                postsToShow.slice(0).reverse().map(post => <Post\n                        key={post._id}\n                        {...{\n                            post,\n                            addPost\n                        }}\n                    />)\n            }\n            </ul>\n            )\n    } else {\n            return (\n                <div className='emptyPosts'>\n                    {/* <img src='https://media.giphy.com/media/26hkhPJ5hmdD87HYA/giphy.gif' alt='none found'/> */}\n                    <p>Unfortunately there are no posts</p>\n            </div>)\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        searchResults: state.page.searchResults,\n        searchText: state.page.search\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setSearchResults: results => dispatch(setSearchResultsAction(results)),\n        setSearch: results => dispatch(setSearchAction(results))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts)","import React, {useState, useRef, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport '../../styles/HighlightedCompose.css';\n\nconst TextArea = props => {\n    const {setCompose, setSuggested} = props  // from parent\n    const {allUsers} = props    // from redux\n\n    const [hashtagTakingAction, setHashtagTakingAction] = useState(false)\n    const [mentionTakingAction, setMentionTakingAction] = useState(false)\n\n    const [hashtagValue, setHashtagValue] = useState(null)\n    const [mentionValue, setMentionValue] = useState(null)\n\n    const textAreaEl = useRef();\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// FORMATTING HASHTAG AND MENTION IN TEXT AREA\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // HASHTAG\n    useEffect(()=>{\n        if(hashtagValue){\n            document.designMode = \"on\"\n            for (let i = 0; i <= hashtagValue.length + 1 ; i++) {\n                document.execCommand(\"delete\", false, \"\")\n            }\n            document.execCommand(\n                \"insertHTML\",\n                false,\n                `<a href='/' class='hashtag'>#${hashtagValue}</a>`\n            );\n            document.execCommand(\"insertText\", false, \" \")\n            document.designMode = \"off\"\n\n            setTimeout(() => { textAreaEl.current.focus() }, 0)\n            setHashtagValue('')\n            setHashtagTakingAction(false)\n        }\n    }, [hashtagValue])\n\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // MENTION\n    useEffect(()=>{\n        if(mentionValue){\n            document.designMode = \"on\"\n            for (let i = 0; i <= mentionValue.length + 1 ; i++) {\n                document.execCommand(\"delete\", false, \"\")\n            }\n\n            const userFound = allUsers.filter(user=> user.name === mentionValue)\n            const user = userFound[0]\n            const exists = userFound.length > 0\n\n\n            const userStyle = exists? `background:${user.color}`: ''\n\n            document.execCommand(\n                \"insertHTML\",\n                false,\n                `<a href='/' class='mention' style=${userStyle}>@${mentionValue}</a>`\n            );\n            document.execCommand(\"insertText\", false, \" \")\n            document.designMode = \"off\"\n\n            setTimeout(() => { textAreaEl.current.focus() }, 0)\n            setMentionValue(null)\n            setMentionTakingAction(false)\n        }\n    }, [allUsers, mentionValue])\n\n\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// SUGGESTIONS\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    const [mentionHash, setMentionHash] = useState('')\n\n    useEffect(()=>{\n\n        // console.log(mentionHash)\n\n        if(mentionTakingAction && mentionHash.length>0 && allUsers){\n            const possible = allUsers.filter( user => user.name.startsWith(mentionHash))\n            console.log(possible)\n            setSuggested(possible)\n        }\n\n        else {\n            setSuggested(null)\n        }\n\n    }, [allUsers, mentionHash, mentionTakingAction, setSuggested])\n\n\n\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// HANDLING KEY UP\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    const handleKeyUp = e => {\n\n        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        // # HASHTAG\n        if (e.keyCode === 51) { // #\n            setHashtagTakingAction(true)\n        } else if (\n            hashtagTakingAction &&\n            e.keyCode === 8 &&\n            hashtagValue &&\n            hashtagValue.length === 1\n            ) { // backspace\n                setHashtagTakingAction(false)\n                setHashtagValue(null)\n                setSuggested(null)\n                setMentionHash('')\n\n        } else if (hashtagTakingAction && e.keyCode === 32) { // space\n            setHashtagValue(mentionHash)\n            setSuggested(null)\n            setMentionHash('')\n        } else if (hashtagTakingAction) { // while hashtag is being written\n            if(e.keyCode === 8){ // backspace\n                setMentionHash(mentionHash.slice(0, -1))\n            } else {\n                const letter = e.key.toLowerCase()\n                const isLetter =  letter.match(/[a-z]/i)\n\n                if(\n                    isLetter &&\n                    e.keyCode !== 16 &&\n                    e.keyCode !== 16 && // is not shift\n                    e.keyCode !== 91 && // is not meta/command\n                    e.keyCode !== 37 && // is not left\n                    e.keyCode !== 38 && // is not up\n                    e.keyCode !== 39 && // is not right\n                    e.keyCode !== 40    // is not down\n                    ){\n                    setMentionHash(mentionHash + letter)\n                }\n\n                else if(\n                    e.keyCode === 16 || // is shift\n                    e.keyCode === 37 || // is left\n                    e.keyCode === 38 || // is up\n                    e.keyCode === 39 || // is right\n                    e.keyCode === 40    // is down\n                    ) { } // do nothing\n\n                else {\n                    setMentionTakingAction(false)\n                    setSuggested(null)\n                    setMentionHash('')\n                    setHashtagValue(null)\n                }\n            }\n        }\n\n\n        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        // @ MENTION\n        if (e.keyCode === 50) { // @\n            setMentionTakingAction(true)\n        }\n\n        else if (\n            mentionTakingAction &&\n            e.keyCode === 8 &&\n            mentionValue &&\n            mentionValue.length === 1\n            ) { // backspace\n            setMentionTakingAction(false)\n            setMentionValue(null)\n            setSuggested(null)\n            setMentionHash('')\n        }\n\n        else if (mentionTakingAction && e.keyCode === 32) { // space\n            setMentionValue(mentionHash)\n            setSuggested(null)\n            setMentionHash('')\n        }\n\n        else if (mentionTakingAction) { // while mention is being written\n\n            if(e.keyCode === 8){ // backspace\n                setMentionHash(mentionHash.slice(0, -1))\n            } else {\n                const letter = e.key.toLowerCase()\n                const isLetter =  letter.match(/[a-z]/i)\n\n                if(\n                    isLetter &&\n                    e.keyCode !== 16 && // is not shift\n                    e.keyCode !== 91 && // is not meta/command\n                    e.keyCode !== 37 && // is not left\n                    e.keyCode !== 38 && // is not up\n                    e.keyCode !== 39 && // is not right\n                    e.keyCode !== 40    // is not down\n                    ){\n                    setMentionHash(mentionHash + letter)\n                }\n\n                else if(\n                    e.keyCode === 16 || // is shift\n                    e.keyCode === 37 || // is left\n                    e.keyCode === 38 || // is up\n                    e.keyCode === 39 || // is right\n                    e.keyCode === 40    // is down\n                    ) { } // do nothing\n\n                else {\n                    setMentionTakingAction(false)\n                    setSuggested(null)\n                    setMentionHash('')\n                    setMentionValue(null)\n                }\n            }\n        }\n        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n        setCompose(textAreaEl.current.innerText)\n    }\n\n    return (\n        <div\n            contentEditable=\"true\"\n            ref={textAreaEl}\n            class=\"highlighted-compose-textArea\"\n            placeholder=\"type something here...\"\n            onKeyUp={handleKeyUp}\n        />\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers\n    }\n}\n\nexport default connect(mapStateToProps)(TextArea)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\nimport {composeRequest} from '../utilities/Requests'\n\nconst Buttons = props => {\n    const {setCurrentPage, setErrorMessage} = props     // from redux dispatch\n    const {reduXprofile} = props                        // from redux state\n    const {compose} = props                             // from parent\n\n    const tweetLength = 120;\n\n    const handleSubmit = async e =>{\n        e.preventDefault()\n        const correctLength = compose.trim().length > 5 && compose.trim().length < tweetLength\n\n        if(correctLength){ server_composeRequest() }\n        else { setErrorMessage('Error: Text is not the right length') }\n    }\n\n    const server_composeRequest = async () => {\n        const response = await composeRequest({\n            token : reduXprofile.token,\n            payload : compose.trim()\n        })\n\n        if(response !== 'OK'){ setErrorMessage(response) }\n        else {\n            console.log('Post was created.')\n            setCurrentPage('posts')\n        }\n    }\n\n    return (\n        <div className='btns'>\n            <button\n                name=\"cancel\"\n                className='submit'\n                onClick={e => {\n                e.preventDefault()\n                setErrorMessage(null)\n                setCurrentPage('posts')\n                }}\n            >\n            Cancel\n            </button>\n\n            <button type='submit' name=\"submit\" className='submit' onClick={handleSubmit}>\n                Submit\n            </button>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons)","import React from 'react'\n\nconst Suggestions = props => {\n    const {suggested} = props\n\n    return (\n        <div className='suggestions'>\n            <li>Maybe:</li> {suggested.map( user => <li>@{user.name}</li> )}\n        </div>\n    )\n}\n\nexport default Suggestions","import React, {useState} from 'react'\nimport TextArea from './HC-textArea'\nimport Buttons from './HC-buttons'\nimport Suggestions from './HC-suggestions'\n\nconst HighlightedCompose = props => {\n    const [compose, setCompose] = useState('')\n    const [suggested, setSuggested] = useState([])\n\n    const suggestionExists = suggested && suggested.length > 0;\n\n    return (\n        <div className='highlighted-compose'>\n            {\n            suggestionExists?\n            <Suggestions {...{compose, suggested}} /> : ''\n            }\n            <TextArea {...{setCompose, setSuggested}} />\n            <Buttons {...{compose}} />\n        </div>\n    )\n}\n\nexport default HighlightedCompose","import React from 'react'\nimport '../../styles/Errors.css'\nimport {connect} from 'react-redux'\nimport {setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Errors = props => {\n    const {reduXerrorMessage, setErrorMessage} = props\n\n    if(reduXerrorMessage){\n        return (\n            <div className='errors' onClick={()=> setErrorMessage(null)}>\n                {reduXerrorMessage}\n            </div>\n        )\n    } else {\n        return <div></div>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        reduXerrorMessage: state.page.errorMessage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Errors);","import React, {useEffect} from 'react'\n\nimport LogIn from './actions/LogIn'\nimport Sidebar from './sidebar/Sidebar'\nimport Register from './actions/Register'\nimport SinglePage from './actions/SinglePage'\n\nimport '../styles/App.css';\nimport '../styles/MediaQueries.css';\n\nimport Posts from './Posts'\n// import Compose from './actions/Compose'\nimport HighlightedCompose from './HighlightedCompose/HC'\nimport Errors from './utilities/Errors'\n\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction, updateAllUsersAction} from '../reduxStore/actions/mongoDb'\nimport {setProfileAction} from '../reduxStore/actions/profile'\nimport {setErrorMessageAction} from '../reduxStore/actions/page'\n\nconst App = props => {\n  const {reduXcurrentPage, updateAllPosts, updateAllUsers} = props\n\n  useEffect(() => {\n    updateAllUsers()\n    updateAllPosts()\n  }, [reduXcurrentPage, updateAllPosts, updateAllUsers])\n\n\n  // depending on currentPage show adequate component;\n  let currentComponent\n  switch(reduXcurrentPage) {\n    case 'log-in':\n      currentComponent = <LogIn />\n      break;\n\n    case 'register':\n      currentComponent = <Register />\n      break;\n\n    case 'compose':\n      // currentComponent = <Compose />\n      currentComponent = <HighlightedCompose />\n      break;\n\n    case 'single-page':\n      currentComponent = <SinglePage />\n      break;\n\n    default:\n      currentComponent = <Posts />\n  }\n\n\n  return (\n  <div className=\"global-app\">\n\n    <Errors />\n\n    <div className='App'>\n      <div className='sidebar'>\n        <Sidebar />\n      </div>\n\n      <div className='container'>\n        {currentComponent}\n      </div>\n    </div>\n  </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  // console.log(state)\n\n  return {\n    reduXprofile: state.profile,\n    allUsers: state.mongoDb.allUsers,\n    reduXcurrentPage: state.page.currentPage,\n    reduXerrorMessage: state.page.errorMessage\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setProfile: profile => dispatch(setProfileAction(profile)),\n    setErrorMessage: message => dispatch(setErrorMessageAction(message)),\n    updateAllPosts: () => dispatch(updateAllPostsAction()),\n    updateAllUsers: () => dispatch(updateAllUsersAction())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const initialState = {\n  allPosts: {},\n  allUsers: {}\n}\n\nconst postReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case 'ADD_POSTS':\n      return {\n        ...state,\n        allPosts: action.payload\n      }\n\n    case 'UPDATE_ALL_POSTS':\n      return {\n        ...state,\n        allPosts: action.payload\n      }\n\n    case 'ADD_USERS':\n      return {\n        ...state,\n        allUsers: action.payload\n      }\n\n    case 'UPDATE_ALL_USERS':\n        return {\n          ...state,\n          allUsers: action.payload\n        }\n\n    default:\n      return state\n  }\n}\n\nexport default postReducer","\nexport const initialState = null\n\nconst profileReducer = (state = initialState, action) => {\n\nswitch (action.type) {\n\n    case 'ADD_PROFILE':\n        return {...state, ...action.payload}\n    \n    case 'REMOVE_PROFILE':\n        return null\n\n    default:\n        return state\n\n}}\n\nexport default profileReducer","\nexport const initialState = {\n    currentPage: 'posts'\n}\n\nconst pageReducer = (state = initialState, action) => {\n\nswitch (action.type) {\n    case 'SET_CURRENT_PAGE':\n        return {...state, currentPage: action.currentPage}\n\n    case 'SET_ERROR_MESSAGE':\n        return {...state, errorMessage: action.message}\n\n    case 'SET_SEARCH':\n        return {...state, search: action.text}\n\n    case 'SET_SEARCH_RESULTS':\n        return {...state, searchResults: action.payload}\n    \n    case 'SET_SINGLE_POST':\n        return {...state, singlePost: action.payload}\n\n    default:\n        return state\n}}\n\nexport default pageReducer","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport mongoReducer from './reducers/mongoReducer'\nimport profileReducer from './reducers/profileReducer'\nimport pageReducer from './reducers/pageReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(combineReducers({\n    page: pageReducer,\n    profile: profileReducer,\n    mongoDb: mongoReducer\n}),\ncomposeEnhancers( applyMiddleware(thunk) )\n)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './reduxStore/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}