{"version":3,"sources":["components/utilities/Requests.js","reduxStore/actions/profile.js","reduxStore/actions/page.js","components/actions/LogIn.js","components/sidebar/Search.js","components/sidebar/Sidebar.js","components/actions/Register.js","reduxStore/actions/mongoDb.js","components/post/LikeButton.js","components/post/DeleteButton.js","components/post/Post.js","components/actions/SinglePage.js","components/Posts.js","components/actions/Compose.js","components/utilities/Errors.js","components/App.js","serviceWorker.js","reduxStore/reducers/mongoReducer.js","reduxStore/reducers/profileReducer.js","reduxStore/reducers/pageReducer.js","reduxStore/store.js","index.js"],"names":["getPostsRequest","a","message","axios","get","catch","err","response","data","getUsersRequest","logInRequest","userInfo","post","registerRequest","deleteRequest","postInfo","likeRequest","dislikeRequest","searchRequest","userPostsRequest","authorId","singlepostRequest","addCommentRequest","deleteCommentRequest","setProfileAction","profile","dispatch","getState","type","payload","setCurrentPageAction","page","currentPage","setErrorMessageAction","setSearchAction","text","setSearchResultsAction","setSinglePostAction","postId","connect","state","allUsers","mongoDb","reduXprofile","setProfile","console","log","userProfile","find","user","_id","localStorage","setItem","token","logInAction","setCurrentPage","setErrorMessage","props","useState","loginInfo","setLoginInfo","handleSubmit","event","preventDefault","name","password","onSubmit","className","onKeyDown","e","keyCode","placeholder","onChange","target","value","toLowerCase","trim","onClick","allPosts","search","setSearch","setSearchResults","SearchInputText","setSearchInputText","getSearchResults","searchText","final","filter","i","length","useEffect","handleSearch","reduXcurrentPage","removeProfile","searchField","handleLogoClick","twitterLogo","_","isEmpty","style","background","color","removeItem","registerUser","registerUserAction","registerInfo","setRegisterInfo","rePasswordEl","useRef","rePassword","passwordsDontMatch","nameHasBlank","split","includes","current","backgroundColor","ref","triangle","onChangeComplete","hex","updateAllPostsAction","updateAllPosts","addLikeRequest","tokenPostInfo","addLikeAction","removeLikeRequest","removeLikeAction","setSinglePost","userDidntLikedBefore","likes","userLikedBefore","cursor","opacity","deletePostRequest","deletePostAction","handleDeleteClick","getFullDate","postDate","d","Date","date","getMonth","getDate","getFullYear","timeHours","getHours","timeMinutes","getMinutes","ampm","getUserPosts","getUserPostsAction","authorProfile","postClick","hashtagClick","hashtag","comments","postText","map","word","startsWith","mentioned","substring","getFinalText","singlePost","commentText","setCommentText","handleComment","commentPayload","form","handleDeleteComment","commentId","allComments","comment","author","borderRight","searchResults","addPost","postsToShow","slice","reverse","key","html","setHTML","caretPos","setCaretPos","caretNode","setCaretNode","textAreaEl","setCaret","el","range","document","createRange","sel","window","getSelection","childNodes","setStart","collapse","removeAllRanges","addRange","shift","contentEditable","dangerouslySetInnerHTML","__html","onKeyUp","inputText","innerText","forEach","getRangeAt","selectedObj","anchorNode","parentNode","nodeType","startOffset","getCaretPosition","reduXerrorMessage","errorMessage","updateAllUsers","requestedUsers","requestedPosts","storediD","getItem","storedToken","f","currentComponent","Boolean","location","hostname","match","initialState","postReducer","action","profileReducer","pageReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","mongoReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"+cAEaA,EAAe,uCAAG,8BAAAC,EAAA,6DACvBC,EAAU,GADa,SAEJC,IAAMC,IAAI,cAChCC,OAAM,SAAAC,GAAG,OAAIJ,EAAO,mBAAeI,EAAIC,SAASC,SAHtB,cAErBD,EAFqB,yBAIV,KAAVL,EAAcA,EAAUK,EAASC,MAJb,2CAAH,qDAOfC,EAAe,uCAAG,8BAAAR,EAAA,6DACvBC,EAAU,GADa,SAEJC,IAAMC,IAAI,cAChCC,OAAM,SAAAC,GAAG,OAAIJ,EAAO,mBAAeI,EAAIC,SAASC,SAHtB,cAErBD,EAFqB,yBAIV,KAAVL,EAAcA,EAAUK,EAASC,MAJb,2CAAH,qDAOfE,EAAY,uCAAG,WAAOC,GAAP,iBAAAV,EAAA,6DACpBC,EAAU,GADU,SAEDC,IAAMS,KAAK,aAAcD,GAC/CN,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHvB,cAElBD,EAFkB,yBAIP,KAAVL,EAAcA,EAAUK,EAASC,MAJhB,2CAAH,sDAOZK,EAAe,uCAAG,WAAOF,GAAP,iBAAAV,EAAA,6DACvBC,EAAU,GADa,SAEJC,IAAMS,KAAK,aAAcD,GAC/CN,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHpB,cAErBD,EAFqB,yBAIV,KAAVL,EAAcA,EAAUK,EAASC,MAJb,2CAAH,sDAcfM,EAAa,uCAAG,WAAOC,GAAP,iBAAAd,EAAA,6DACrBC,EAAU,GADW,SAEFC,IAAMS,KAAK,cAAeG,GAChDV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHtB,cAEnBD,EAFmB,yBAIR,KAAVL,EAAcA,EAAUK,EAASC,MAJf,2CAAH,sDAObQ,EAAW,uCAAG,WAAOD,GAAP,iBAAAd,EAAA,6DACnBC,EAAU,GADS,SAEAC,IAAMS,KAAK,YAAaG,GAC9CV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHxB,cAEjBD,EAFiB,yBAIN,KAAVL,EAAcA,EAAUK,EAASC,MAJjB,2CAAH,sDAOXS,EAAc,uCAAG,WAAOF,GAAP,iBAAAd,EAAA,6DACtBC,EAAU,GADY,SAEHC,IAAMS,KAAK,eAAgBG,GACjDV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHrB,cAEpBD,EAFoB,yBAIT,KAAVL,EAAcA,EAAUK,EAASC,MAJd,2CAAH,sDAOdU,EAAa,uCAAG,WAAOH,GAAP,iBAAAd,EAAA,6DACrBC,EAAU,GADW,SAEFC,IAAMS,KAAK,cAAeG,GAChDV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHtB,cAEnBD,EAFmB,yBAIR,KAAVL,EAAcA,EAAUK,EAASC,MAJf,2CAAH,sDAObW,EAAgB,uCAAG,WAAOC,GAAP,iBAAAnB,EAAA,6DACxBC,EAAU,GADc,SAELC,IAAMS,KAAK,iBAAkBQ,GACnDf,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHnB,cAEtBD,EAFsB,yBAIX,KAAVL,EAAcA,EAAUK,EAASC,MAJZ,2CAAH,sDAOhBa,EAAiB,uCAAG,WAAON,GAAP,iBAAAd,EAAA,6DACzBC,EAAU,GADe,SAENC,IAAMC,IAAN,oBAAuBW,IAC7CV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHlB,cAEvBD,EAFuB,yBAIZ,KAAVL,EAAcA,EAAUK,EAASC,MAJX,2CAAH,sDAOjBc,EAAiB,uCAAG,WAAOP,GAAP,iBAAAd,EAAA,6DACzBC,EAAU,GADe,SAENC,IAAMS,KAAN,gBAA4BG,GAClDV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHlB,cAEvBD,EAFuB,yBAIZ,KAAVL,EAAcA,EAAUK,EAASC,MAJX,2CAAH,sDAOjBe,EAAoB,uCAAG,WAAOR,GAAP,iBAAAd,EAAA,6DAC5BC,EAAU,GADkB,SAETC,IAAMS,KAAN,qBAAiCG,GACvDV,OAAM,SAAAC,GAAG,OAAIJ,EAAO,iBAAaI,EAAIC,SAASC,SAHf,cAE1BD,EAF0B,yBAIf,KAAVL,EAAcA,EAAUK,EAASC,MAJR,2CAAH,sDCpFpBgB,EAAmB,SAACC,GAChC,OAAO,SAACC,EAAUC,GACjBD,EAAS,CACRE,KAAM,cACNC,QAASJ,MCJCK,EAAuB,SAACC,GACpC,OAAO,SAACL,EAAUC,GACjBD,EAAS,CACRE,KAAM,mBACNI,YAAaD,MAKHE,EAAwB,SAAC/B,GACrC,OAAO,SAACwB,EAAUC,GACjBD,EAAS,CACRE,KAAM,oBACN1B,QAASA,MAKCgC,EAAkB,SAACC,GAC/B,OAAO,SAACT,EAAUC,GACjBD,EAAS,CACRE,KAAM,aACNO,KAAMA,MAKIC,EAAyB,SAACP,GACtC,OAAO,SAACH,EAAUC,GACjBD,EAAS,CACRE,KAAM,qBACNC,QAASA,MA2BCQ,EAAsB,SAACC,GACnC,OAAGA,EACF,uCAAO,WAAOZ,EAAUC,GAAjB,eAAA1B,EAAA,sEACiBoB,EAAkBiB,GADnC,OACA/B,EADA,OAENmB,EAAS,CACRE,KAAM,kBACNC,QAAStB,IAJJ,2CAAP,wDAQO,SAACmB,EAAUC,GACjBD,EAAS,CACRE,KAAM,kBACNC,QAAS,SCSEU,eAhBS,SAAAC,GACpB,MAAO,CACHC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,YAID,SAAAC,GACvB,MAAO,CACHkB,WAAY,SAAAnB,GAAO,OAAIC,EAASF,EAAiBC,KACjDf,aAAc,SAAAe,GAAO,OAAIC,EF3DN,SAACD,GAC3B,8CAAO,WAAOC,EAAUC,GAAjB,mBAAA1B,EAAA,sEACiBS,EAAae,GAD9B,OAEe,iBADflB,EADA,SAGLsC,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,oBACN1B,QAASK,MAGVsC,QAAQC,IAAI,yBACNL,EAAWd,IAAWe,QAAQD,SAC9BM,EAAcN,EAASO,MAAK,SAAAC,GAAI,OAAGA,EAAKC,MAAQ3C,EAAS2C,OAE/DC,aAAaC,QAAQ,WAAY7C,EAAS2C,KAC1CC,aAAaC,QAAQ,cAAe7C,EAAS8C,OAE7C3B,EAAS,CACRE,KAAM,cACNC,QAAQ,2BAAKkB,GAAN,IAAmBM,MAAO9C,EAAS8C,UAG3C3B,EAAS,CACRE,KAAM,mBACNI,YAAa,WAvBT,2CAAP,wDE0DyCsB,CAAY7B,KAC9C8B,eAAgB,SAAAxB,GAAI,OAAIL,EAASI,EAAqBC,KACtDyB,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,QAIpDqC,EAzED,SAAAkB,GAAU,IACbF,EAAiDE,EAAjDF,eAAgBC,EAAiCC,EAAjCD,gBAAiB9C,EAAgB+C,EAAhB/C,aADrB,EAEegD,qBAFf,mBAEZC,EAFY,KAEDC,EAFC,KAIbC,EAAe,SAAAC,GACjBA,EAAMC,kBACuBJ,IAAcA,EAAUK,OAASL,EAAUM,SAGpET,EAAgB,4CAGzBA,EAAgB,MACP9C,EAAaiD,KAWrB,OACI,0BAAMO,SAAUL,EAAcM,UAAU,YAAYC,UARnC,SAACC,GACD,KAAdA,EAAEC,UACDD,EAAEN,iBACFF,EAAaQ,MAMb,2BACIzC,KAAK,OACLoC,KAAK,OACLO,YAAY,kBACZC,SAAU,SAACH,GAAD,OAAMT,EAAa,2BACtBD,GADqB,IAExBK,KAAKK,EAAEI,OAAOC,MAAMC,cAAcC,aAI1C,2BACIhD,KAAK,WACLoC,KAAK,WACLO,YAAY,sBACZC,SAAU,SAACH,GAAD,OAAMT,EAAa,2BACtBD,GADqB,IAExBM,SAASI,EAAEI,OAAOC,MAAME,aAIhC,yBAAKT,UAAU,QACX,4BAAQA,UAAU,OAAOU,QAAS,WAC9BrB,EAAgB,MAChBD,EAAe,WAFnB,YAIA,4BAAQY,UAAU,cAAcvC,KAAK,UAArC,eCmBDW,G,OAAAA,aAfS,SAAAC,GACpB,MAAO,CACHsC,SAAUtC,EAAME,QAAQoC,SACxBC,OAAQvC,EAAMT,KAAKgD,WAIA,SAAArD,GACvB,MAAO,CACH8B,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,KAC3D8E,UAAW,SAAA7C,GAAI,OAAIT,EAASQ,EAAgBC,KAC5C8C,iBAAkB,SAAApD,GAAO,OAAIH,EAASU,EAAuBP,QAItDU,EA1EA,SAAAkB,GAAU,IACdD,EAAkEC,EAAlED,gBAAiBwB,EAAiDvB,EAAjDuB,UAAWD,EAAsCtB,EAAtCsB,OAAQD,EAA8BrB,EAA9BqB,SAAUG,EAAoBxB,EAApBwB,iBADjC,EAG0BvB,qBAH1B,mBAGbwB,EAHa,KAGIC,EAHJ,KAKdC,EAAgB,uCAAG,WAAMC,GAAN,iBAAApF,EAAA,6DACrB4C,QAAQC,IAAR,mCAAwCuC,EAAxC,aADqB,SAEEnE,EAAc,CACjCW,QAAUwD,EAAWV,gBAHJ,OAME,kBAJjBpE,EAFe,SAOjBsC,QAAQC,IAAIvC,GACZiD,EAAgBjD,KAEhBiD,EAAgB,MAEV8B,EAAQR,EAASS,QAAO,SAAA3E,GAC1B,IAAI,IAAI4E,EAAE,EAAGA,EAAEjF,EAASkF,OAAQD,IAC5B,GAAIjF,EAASiF,KAAO5E,EAAKsC,IACrB,OAAOtC,KAKnBqE,EAAiBK,IApBA,2CAAH,sDAwBtBI,qBAAU,WACQ,KAAXX,GACCC,EAAU,MACVC,EAAiB,OACXF,GACNK,EAAiBL,KAEtB,CAACA,IAEJ,IAAMY,EAAY,uCAAG,WAAMtB,GAAN,SAAApE,EAAA,sDACjBoE,EAAEN,iBACFlB,QAAQC,IAAR,2BAAgCoC,IAChCF,EAAUE,GAHO,2CAAH,sDAMlB,OACI,0BAAMhB,SAAUyB,GACZ,2BACI/D,KAAK,OACLoC,KAAK,SACLO,YAAY,0BACZC,SAAY,SAAArC,GACRgD,EAAmBhD,EAAKsC,OAAOC,QAEnCA,MAAOQ,S,QC2DR3C,eAnBS,SAAAC,GACpB,MAAO,CACHC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,QACpBmE,iBAAkBpD,EAAMT,KAAKC,gBAIV,SAAAN,GACvB,MAAO,CACHkB,WAAY,SAAAnB,GAAO,OAAIC,EAASF,EAAiBC,KACjDoE,cAAe,kBAAMnE,GJjGrB,SAACA,EAAUC,GACjBD,EAAS,CAAEE,KAAM,uBIiGX2B,eAAgB,SAAAxB,GAAI,OAAIL,EAASI,EAAqBC,KACtDiD,UAAW,SAAA7C,GAAI,OAAIT,EAASQ,EAAgBC,KAC5C8C,iBAAkB,SAAApD,GAAO,OAAIH,EAASU,EAAuBP,KAC7D2B,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,QAIpDqC,EA5GC,SAAAkB,GAAS,IACdoC,EAA+GpC,EAA/GoC,cAAelD,EAAgGc,EAAhGd,aAAciD,EAAkFnC,EAAlFmC,iBAAkBrC,EAAgEE,EAAhEF,eAAgByB,EAAgDvB,EAAhDuB,UAAWC,EAAqCxB,EAArCwB,iBAAkBzB,EAAmBC,EAAnBD,gBAE7FsC,EAAc,kBAAC,EAAD,MAEdC,EAAkB,SAAA1B,GACpBA,EAAEN,iBACFiB,EAAU,MACVC,EAAiB,MACjBzB,EAAgB,MAChBD,EAAe,UAGbyC,EAAc,yBAAK7B,UAAU,YAAYU,QAASkB,GAApC,IAAsD,kBAAC,IAAD,MAAtD,KAKpB,OAAIE,IAAEC,QAAQvD,IACU,UAAnBiD,GAAiD,gBAAnBA,EAeZ,WAAnBA,GACmB,aAAnBA,GACmB,YAAnBA,EAGA,oCAEuB,YAAnBA,EACAI,EACA,yBACI7B,UAAU,oCACVU,QAASkB,EACTI,MAAO,CAACC,WAAYzD,EAAa0D,QAEpC1D,EAAaqB,MAGlB,yBAAKG,UAAU,cACS,WAAnByB,EAA6B,SAAUA,IAW5C,yBAAKzB,UAAU,WACX,yBACIA,UAAU,eACVU,QAASkB,EACTI,MAAO,CAACC,WAAYzD,EAAa0D,QAEpC1D,EAAaqB,MAGlB,4BAAQa,QAAS,kBAAItB,EAAe,aAApC,aAEA,4BAAQsB,QAAS,WACbhC,QAAQC,IAAI,eACZ+C,IACA1C,aAAamD,WAAW,YACxBnD,aAAamD,WAAW,eACxB9C,EAAgB,uDAChBD,EAAe,WANnB,YASKuC,GA7DL,oCACCE,EACD,4BAAQ7B,UAAU,YAAYU,QAAS,kBAAItB,EAAe,YAA1D,WACA,4BAAQY,UAAU,eAAeU,QAAS,kBAAItB,EAAe,cAA7D,aACCuC,M,SC0FMvD,G,OAAAA,aAhBS,SAAAC,GACpB,MAAO,CACHC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,YAID,SAAAC,GACvB,MAAO,CACHkB,WAAY,SAAAnB,GAAO,OAAIC,EAASF,EAAiBC,KACjD8E,aAAc,SAAA9E,GAAO,OAAIC,ELxEC,SAACD,GAClC,8CAAO,WAAOC,EAAUC,GAAjB,eAAA1B,EAAA,sEAEiBY,EAAgBY,GAFjC,OAIe,iBAFflB,EAFA,SAKLsC,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,oBACN1B,QAASK,MAGVsC,QAAQC,IAAI,+BACZpB,EAAS,CACRE,KAAM,cACNC,QAAStB,KAdL,2CAAP,wDKuEyCiG,CAAmB/E,KACrD8B,eAAgB,SAAAxB,GAAI,OAAIL,EAASI,EAAqBC,KACtDyB,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,QAIpDqC,EAtHE,SAAAkB,GAAU,IAChB8C,EAAiD9C,EAAjD8C,aAAchD,EAAmCE,EAAnCF,eAAgBC,EAAmBC,EAAnBD,gBADf,EAEkBE,qBAFlB,mBAEf+C,EAFe,KAEDC,EAFC,KAGhBC,EAAeC,mBAGf/C,EAAe,SAAAC,GAKjB,GAJAA,EAAMC,kBAEuB0C,IAAiBA,EAAazC,OAASyC,EAAaxC,WAAawC,EAAaI,aAAeJ,EAAaJ,MAGnI7C,EAAgB,8CAEf,CACD,IAAMsD,EAAqBL,EAAaxC,WAAawC,EAAaI,WAE5DE,EAAeN,EAAazC,KAAKgD,MAAM,IAAIC,SAAS,KAEvDH,GACCH,EAAaO,QAAQf,MAAMgB,gBAAkB,UAC7C3D,EAAgB,kCAEZuD,EACJvD,EAAgB,sCAGhBmD,EAAaO,QAAQf,MAAMgB,gBAAkB,QAC7C3D,EAAgB,IAChBD,EAAe,SACfgD,EAAaE,MAYzB,OACI,0BAAMvC,SAAUL,EAAcM,UAAU,eAAeC,UARtC,SAACC,GACD,KAAdA,EAAEC,UACDD,EAAEN,iBACFF,EAAaQ,MAMb,2BACIzC,KAAK,OACLoC,KAAK,OACLO,YAAY,kBACZC,SAAU,SAACH,GAAD,OAAMqC,EAAgB,2BACzBD,GADwB,IAE3BzC,KAAOK,EAAEI,OAAOC,MAAMC,cAAcC,aAG5C,2BACIhD,KAAK,WACLoC,KAAK,WACLO,YAAY,sBACZC,SAAU,SAACH,GAAD,OAAMqC,EAAgB,2BACzBD,GADwB,IAE3BxC,SAAWI,EAAEI,OAAOC,MAAME,aAGlC,2BACIhD,KAAK,WACLoC,KAAK,aACLoD,IAAKT,EACLpC,YAAY,yBACZC,SAAU,SAACH,GAAD,OAAMqC,EAAgB,2BACzBD,GADwB,IAE3BI,WAAaxC,EAAEI,OAAOC,MAAME,aAIpC,yBAAKT,UAAU,cACX,yBAAKA,UAAU,oBACX,iDAEJ,yBAAKA,UAAU,sBACf,kBAAC,gBAAD,CACIkD,SAAS,OACTC,iBAAkB,SAACjB,EAAOvC,GACtB4C,EAAgB,2BACTD,GADQ,IAEXJ,MAAQA,EAAMkB,YAO9B,yBAAKpD,UAAU,QACX,4BAAQU,QAAS,WACbtB,EAAe,SACfC,EAAgB,QAFpB,YAIA,4BAAQW,UAAU,cAAavC,KAAK,UAApC,gBCpGH4F,EAAuB,WACnC,8CAAO,WAAO9F,EAAUC,GAAjB,eAAA1B,EAAA,sEACkBD,IADlB,OAGiB,kBAFjBO,EADA,SAILsC,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,mBACNC,QAAS,KAGVH,EAAS,CACRE,KAAM,oBACN1B,QAASK,MAIVsC,QAAQC,IAAI,uBACZpB,EAAS,CACRE,KAAM,mBACNC,QAAStB,KAnBL,2CAAP,yDCoEcgC,eAjBS,SAAAC,GACpB,MAAO,CACHC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,QACpBO,YAAaQ,EAAMT,KAAKC,gBAIL,SAAAN,GACvB,MAAO,CACH+F,eAAgB,kBAAM/F,EAAS8F,MAC/BE,eAAgB,SAACC,GAAD,OAAmBjG,EDcd,SAACiG,GAC7B,8CAAO,WAAOjG,EAAUC,GAAjB,eAAA1B,EAAA,sEAEiBe,EAAY2G,GAF7B,OAIU,QAFVpH,EAFA,SAKLsC,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,oBACN1B,QAASK,KAIVsC,QAAQC,IAAI,mBAZP,2CAAP,wDCfmD8E,CAAcD,KAC1DE,kBAAmB,SAACF,GAAD,OAAmBjG,ED+Bd,SAACiG,GAChC,8CAAO,WAAOjG,EAAUC,GAAjB,eAAA1B,EAAA,sEAEiBgB,EAAe0G,GAFhC,OAIU,QAFVpH,EAFA,SAKLsC,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,oBACN1B,QAASK,KAIVsC,QAAQC,IAAI,qBAZP,2CAAP,wDChCsDgF,CAAiBH,KAChEI,cAAe,SAAAzF,GAAM,OAAIZ,EAASW,EAAoBC,QAI/CC,EAjEI,SAAAkB,GAAU,IAClBd,EAA4Dc,EAA5Dd,aAAc8E,EAA8ChE,EAA9CgE,eAAgBzF,EAA8ByB,EAA9BzB,YAAa+F,EAAiBtE,EAAjBsE,cAC3CnH,EAA2C6C,EAA3C7C,KAAM8G,EAAqCjE,EAArCiE,eAAgBG,EAAqBpE,EAArBoE,kBAGzB1B,EAAQ,GAEN6B,EAAuBrF,GAAgB/B,EAAKQ,WAAauB,EAAaO,MAAQtC,EAAKqH,MAAMhB,SAAStE,EAAaO,KAE/GgF,EAAkBvF,GAAgB/B,EAAKQ,WAAauB,EAAaO,KAAOtC,EAAKqH,MAAMhB,SAAStE,EAAaO,KAU/G,OARG8E,EACC7B,EAAQ,CAACE,MAAM,QAAS8B,OAAO,UAAWC,QAAQ,GAG9CF,IACJ/B,EAAQ,CAACE,MAAM,MAAO8B,OAAO,UAAWC,QAAQ,IAIhD,4BAAQjE,UAAU,OAAOU,QAAO,uCAAG,WAAMf,GAAN,SAAA7D,EAAA,0DAC5B+H,EAD4B,gCAErBN,EAAe,CACjBrE,MAAMV,EAAaU,MACnBH,IAAItC,EAAKsC,MAJc,iCAOvBgF,EAPuB,gCAQrBL,EAAkB,CACpBxE,MAAMV,EAAaU,MACnBH,IAAItC,EAAKsC,MAVc,UAeZ,UAAhBlB,EAf4B,kCAgBrByF,IAhBqB,mCAkBP,gBAAhBzF,EAlBuB,kCAmBrB+F,EAAcnH,EAAKsC,KAnBE,4CAAH,sDAqB7BiD,MAAOA,GACN,+BAAQvF,EAAKqH,MAAMxC,QACnB,kBAAC,IAAD,CAAYtB,UAAU,cCLnB5B,eAfS,SAAAC,GACpB,MAAO,CACHC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,YAID,SAAAC,GACvB,MAAO,CACH+F,eAAgB,kBAAM/F,EAAS8F,MAC/Ba,kBAAmB,SAACV,GAAD,OAAmBjG,EFsBd,SAACiG,GAChC,8CAAO,WAAOjG,EAAUC,GAAjB,eAAA1B,EAAA,sEAEkBa,EAAc6G,GAFhC,OAIU,QAFVpH,EAFA,QAKLsC,QAAQC,IAAIvC,IAGZsC,QAAQC,IAAI,kCACZpB,EAAS,CACRE,KAAM,mBACNI,YAAa,WAXT,2CAAP,wDEvBsDsG,CAAiBX,KAChEpE,eAAgB,SAAAxB,GAAI,OAAIL,EAASI,EAAqBC,QAI/CQ,EAvCM,SAAAkB,GAAU,IACpBd,EAAmDc,EAAnDd,aAAc8E,EAAqChE,EAArCgE,eAAgBY,EAAqB5E,EAArB4E,kBAC9BzH,EAAQ6C,EAAR7C,KAGD2H,EAAiB,uCAAG,WAAMlE,GAAN,SAAApE,EAAA,6DACtBoE,EAAEN,iBADoB,SAEhBsE,EAAkB,CACpBhF,MAAMV,EAAaU,MACnBH,IAAItC,EAAKsC,MAJS,OAMtBuE,IANsB,2CAAH,sDASvB,OACI,4BACItD,UAAU,SACVU,QAAS0D,GAFb,aCsGFC,EAAc,SAACC,GACjB,IAEMC,EAAI,IAAIC,KAAKF,GACbG,EAAI,UAHG,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAGtGF,EAAEG,YAAd,YAA6BH,EAAEI,UAA/B,aAA6CJ,EAAEK,eACnDC,EAAYN,EAAEO,WAAa,GAAKP,EAAEO,WAAa,GAAKP,EAAEO,WACtDC,GAAeR,EAAES,aAAe,GAAK,IAAM,IAAMT,EAAES,aACnDC,EAAOV,EAAEO,YAAc,GAAK,KAAO,KACzC,MAAM,GAAN,OAAUL,EAAV,cAAoBI,EAApB,YAAiCE,EAAjC,YAAgDE,IAsBrC7G,eAnBS,SAAAC,GACpB,MAAO,CACHsC,SAAUtC,EAAME,QAAQoC,SACxBrC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,QACpBO,YAAaQ,EAAMT,KAAKC,gBAIL,SAAAN,GACvB,MAAO,CACHsD,UAAW,SAAA7C,GAAI,OAAIT,EAASQ,EAAgBC,KAC5CkH,aAAc,SAAAjI,GAAQ,OAAIM,ER3GA,SAACN,GAClC,8CAAO,WAAOM,EAAUC,GAAjB,eAAA1B,EAAA,sEACkBkB,EAAiB,CAACC,SAASA,IAD7C,OAGiB,kBAFjBb,EADA,SAILsC,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,oBACN1B,QAASK,MAIVsC,QAAQC,IAAI,gCACZD,QAAQC,IAAIvC,GACZmB,EAAS,CACRE,KAAM,qBACNC,QAAStB,KAfL,2CAAP,wDQ0G0C+I,CAAmBlI,KACtDmC,eAAgB,SAAAxB,GAAI,OAAIL,EAASI,EAAqBC,KACtD0F,eAAgB,kBAAM/F,EAAS8F,MAC/BO,cAAe,SAAAzF,GAAM,OAAIZ,EAASW,EAAoBC,QAI/CC,EAhJF,SAAAkB,GAAU,IACZuB,EAA+FvB,EAA/FuB,UAAWvC,EAAoFgB,EAApFhB,SAAUE,EAA0Ec,EAA1Ed,aAAcY,EAA4DE,EAA5DF,eAAgBwE,EAA4CtE,EAA5CsE,cAAe/F,EAA6ByB,EAA7BzB,YAAaqH,EAAgB5F,EAAhB4F,aAC/EzI,EAAQ6C,EAAR7C,KAEH2I,EAAgB9G,EAASO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,MAAQtC,EAAKQ,YAExDmI,IACAA,EAAgB,CACZvF,KAAK,wBACLqC,MAAO,QAKf,IAyCMmD,EAAS,uCAAG,sBAAAvJ,EAAA,sEACR8H,EAAcnH,EAAKsC,KADX,OAEdK,EAAe,eAFD,2CAAH,qDAKTkG,EAAe,SAAAC,GACjBnG,EAAe,SACfwE,EAAc,MACd/C,EAAU0E,IAGd,OACA,wBAAIvF,UAAU,QACV,yBAAKA,UAAU,eACX,yBACIA,UAAU,YACVU,QAAS,WACLwE,EAAaE,EAAcrG,KACR,UAAhBlB,GACCuB,EAAe,WAIvB,yBACIY,UAAU,aACVgC,MAAO,CAACC,WAAWmD,EAAclD,SAErC,4BAAKkD,EAAcvF,OAEvB,yBAAKG,UAAU,sBAED,UAAdnC,EACA,wBAAI6C,QAAS2E,EAAWrF,UAAU,YAC9B,mCAASvD,EAAK+I,SAAS/I,EAAK+I,SAASlE,OAAO,EAA5C,KACA,kBAAC,IAAD,CAAiBtB,UAAU,gBACvB,GAER,kBAAC,EAAD,CAAYvD,KAAMA,MAItB,yBAAKuD,UAAU,aACX,uBAAGA,UAAU,QAnFA,SAACyF,EAAUnH,GAC5B,OACI,oCACCmH,EAAS5C,MAAM,OAAO6C,KAAI,SAAAC,GAEvB,GAAGA,EAAKC,WAAW,KACf,OACI,4BACIlF,QAAS,kBAAI4E,EAAaK,IAC1B3F,UAAU,WAEb2F,GAGJ,GAAGA,EAAKC,WAAW,KAAK,CACzB,IAAMC,EAAYvH,EAASO,MAAK,SAAAC,GAAI,OAAGA,EAAKe,OAAS8F,EAAKnF,cAAcsF,UAAU,MAE9E9D,EAAM,GAMV,OAJG6D,IACC7D,EAAQ,CAACC,WAAW4D,EAAU3D,MAAOA,MAAO,UAI5C,4BACIF,MAAOA,EACPhC,UAAU,WAEb2F,GAKL,OAAOA,EAAO,QAkDDI,CAAatJ,EAAKiB,QAASY,KAGpD,yBAAK0B,UAAU,eACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,QAAQqE,EAAY5H,EAAKgI,QAG1CjG,GAAgBA,EAAaO,MAAQtC,EAAKQ,SAC1C,kBAAC,EAAD,CAAcR,KAAMA,IAAW,QCU5B2B,G,OAAAA,aAdS,SAAAC,GACpB,MAAO,CACH2H,WAAY3H,EAAMT,KAAKoI,WACvB1I,QAASe,EAAMf,QACfgB,SAAUD,EAAME,QAAQD,aAIL,SAAAf,GACvB,MAAO,CACHqG,cAAe,SAAAzF,GAAM,OAAIZ,EAASW,EAAoBC,QAI/CC,EApHI,SAAAkB,GAAU,IAAD,EACcC,qBADd,mBACjB0G,EADiB,KACJC,EADI,KAEjBF,EAAgD1G,EAAhD0G,WAAY1I,EAAoCgC,EAApChC,QAASgB,EAA2BgB,EAA3BhB,SAAUsF,EAAiBtE,EAAjBsE,cAEhCuC,EAAa,uCAAG,WAAMjG,GAAN,iBAAApE,EAAA,6DAClBoE,EAAEN,iBAEIwG,EAAiB,CACnBlH,MAAO5B,EAAQ4B,MACfH,IAAKiH,EAAWjH,IAChBhD,QAASkK,EAAYxF,QANP,SASKtD,EAAkBiJ,GATvB,UAWF,QAFVhK,EATY,wBAYdsC,QAAQC,IAAIvC,GAZE,8BAedsC,QAAQC,IAAI,sBACZuH,EAAe,IAhBD,UAiBRtC,EAAcoC,EAAWjH,KAjBjB,4CAAH,sDAsBbsH,EACM,0BAAMtG,SAAUoG,GACZ,2BACI1I,KAAK,OACLoC,KAAK,UACLG,UAAU,gBACVO,MAAO0F,EACP7F,YAAY,0BACZC,SAAU,SAAAH,GAAC,OAAEgG,EAAehG,EAAEI,OAAOC,WAKnD+F,EAAmB,uCAAG,WAAMC,GAAN,iBAAAzK,EAAA,6DAClBsK,EAAiB,CACnBlH,MAAO5B,EAAQ4B,MACff,OAAQ6H,EAAWjH,IACnBwH,UAAWA,GAJS,SAODnJ,EAAqBgJ,GAPpB,UASR,QAFVhK,EAPkB,wBAUpBsC,QAAQC,IAAIvC,GAVQ,8BAapBsC,QAAQC,IAAI,sBAbQ,UAcdiF,EAAcoC,EAAWjH,KAdX,4CAAH,sDAkBnByH,EAAcR,EAAWR,SACXQ,EAAWR,SAASE,KAAI,SAAAe,GAEpB,IAAIC,EAKJ,OAJGpI,IACCoI,EAASpI,EAASO,MAAK,SAAAC,GAAI,OAAGA,EAAKC,MAAQ0H,EAAQxJ,aAIvD,yBAAK+C,UAAU,iBAAiBgC,MAAO,CAAC2E,YAAY,cAAD,OAAgBD,EAAOxE,SACtE,6BACI,4CAAWwE,EAAO7G,KAAlB,WACC4G,EAAQ1K,SAIbuB,GAAYmJ,EAAQxJ,WAAaK,EAAQyB,IACzC,4BACIiB,UAAU,iBACVU,QAAS,SAAAR,GACLA,EAAEN,iBACF0G,EAAoBG,EAAQ1H,OAJpC,YAMqB,OAKxB,GAGzB,OACI,6BACI,kBAAC,EAAD,CAAMtC,KAAMuJ,IAEZ,yBAAKhG,UAAU,iBACX,yBAAKA,UAAU,iBACVwG,GAEJlJ,EAAS+I,EAAO,SCtDlBjI,G,qBAAAA,aAZS,SAAAC,GACpB,MAAO,CACHsC,SAAStC,EAAME,QAAQoC,SACvBiG,cAAcvI,EAAMT,KAAKgJ,kBAIN,SAAArJ,GACvB,MAAO,KAIIa,EA3CD,SAAAkB,GAAU,IACbqB,EAA2BrB,EAA3BqB,SAAUiG,EAAiBtH,EAAjBsH,cACVC,EAAWvH,EAAXuH,QAEHC,EAAcnG,EAGlB,OAFGiG,IAAiBE,EAAcF,GAE9B9E,IAAEC,QAAQ+E,IAAsC,kBAAfA,EAgBzB,yBAAK9G,UAAU,cAEX,gEAhBR,4BAEI8G,EAAYC,MAAM,GAAGC,UAAUtB,KAAI,SAAAjJ,GAAI,OAAI,kBAAC,EAAD,eACnCwK,IAAKxK,EAAKsC,KACN,CACAtC,OACAoK,qBC+GbzI,G,OAAAA,aAdS,SAAAC,GACpB,MAAO,CACHC,SAAUD,EAAME,QAAQD,SACxBE,aAAcH,EAAMf,YAID,SAAAC,GACvB,MAAO,CACH6B,eAAgB,SAAAxB,GAAI,OAAIL,EAASI,EAAqBC,KACtDyB,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,QAIpDqC,EA/HC,SAAAkB,GAAU,IAAD,EAEGC,qBAFH,mBAEd2H,EAFc,KAERC,EAFQ,OAGW5H,mBAAS,GAHpB,mBAGd6H,EAHc,KAGJC,EAHI,OAIa9H,mBAAS,GAJtB,mBAId+H,EAJc,KAIHC,EAJG,KAKfC,EAAa/E,mBAmCbgF,EAAW,WACb/I,QAAQC,IAAI,gBACZ,IAAI+I,EAAKF,EAAWzE,QAChB4E,EAAQC,SAASC,cACjBC,EAAMC,OAAOC,eAEjBtJ,QAAQC,IAAI6I,GACZ9I,QAAQC,IAAI,6BAA8B+I,EAAGO,WAAWX,IACxD5I,QAAQC,IAAI,WAAYyI,GACxB1I,QAAQC,IAAI,IAEZgJ,EAAMO,SAASR,EAAGO,WAAWX,GAAYF,GACzCO,EAAMQ,UAAS,GAEfL,EAAIM,kBACJN,EAAIO,SAASV,IAGjBpG,qBAAU,WAGHiG,EAAWzE,QAAQkF,WAAW3G,OAAO,GACpCmG,MAEL,CAACP,EAAMO,IAEV,IAAIa,EAAQ,EAEZ,OACI,yBACIC,gBAAkB,OAClBvI,UAAY,OACZI,YAAc,sBACd6C,IAAOuE,EACPgB,wBAAyB,CAACC,OAAQvB,GAClCwB,QAAY,SAAAxI,GAER,IAAMyI,EAAYnB,EAAWzE,QAAQ6F,UAGrClK,QAAQC,IAAIuB,EAAEC,SACG,KAAdD,EAAEC,SAAgC,KAAdD,EAAEC,UACrBmI,GAAS,GAIb,IAAInH,EAAQ,GAEZwH,EAAU9F,MAAM,OAAOgG,SAAS,SAAAlD,GACzBA,EAAKC,WAAW,KACfzE,GAAK,gCAA6BwE,EAA7B,YAEDA,EAAKC,WAAW,KACpBzE,GAAK,gCAA6BwE,EAA7B,YAGLxE,GAAK,UAAOwE,EAAP,QAII,KAAdzF,EAAEC,UAEDgH,EAAQhG,GA/FC,SAAAmH,GAGrB,GAFA5J,QAAQC,IAAI,yBAERoJ,OAAOC,cAAgBD,OAAOC,eAAec,WAAY,CACzD,IAAInB,EAAQI,OAAOC,eAAec,WAAW,GACzCC,EAAchB,OAAOC,eACrBC,EAAac,EAAYC,WAAWC,WAAWhB,WAEnDvJ,QAAQC,IAAI,yBAA0BoK,EAAYC,YAElD,IAAK,IAAI3H,EAAI,EAAGA,EAAI4G,EAAW3G,OAAQD,IAC/B4G,EAAW5G,KAAO0H,EAAYC,aAC9BtK,QAAQC,IAAI,cAAe0C,EAAG4G,EAAW5G,IACzC3C,QAAQC,IACJ,aACAsJ,EAAW5G,GAAG6H,UAMlB3B,EAAalG,IAIrB3C,QAAQC,IAAI,WAAYgJ,EAAMwB,aAC9BzK,QAAQC,IAAI,IAEZ0I,EAAYM,EAAMwB,YAAcb,IAoExBc,CAAiBd,WC9EtBlK,G,OAAAA,aAZS,SAAAC,GACpB,MAAO,CACHgL,kBAAmBhL,EAAMT,KAAK0L,iBAIX,SAAA/L,GACvB,MAAO,CACH8B,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,QAIpDqC,EA1BA,SAAAkB,GAAU,IACd+J,EAAsC/J,EAAtC+J,kBAAmBhK,EAAmBC,EAAnBD,gBAE1B,OAAGgK,EAEK,yBAAKrJ,UAAU,SAASU,QAAS,kBAAKrB,EAAgB,QACjDgK,GAIF,kCC2EAjL,eApBS,SAAAC,GAGtB,MAAO,CACLG,aAAcH,EAAMf,QACpBgB,SAAUD,EAAME,QAAQD,SACxBmD,iBAAkBpD,EAAMT,KAAKC,YAC7BwL,kBAAmBhL,EAAMT,KAAK0L,iBAIP,SAAA/L,GACzB,MAAO,CACLkB,WAAY,SAAAnB,GAAO,OAAIC,EAASF,EAAiBC,KACjD+B,gBAAiB,SAAAtD,GAAO,OAAIwB,EAASO,EAAsB/B,KAC3DuH,eAAgB,kBAAM/F,EAAS8F,MAC/BkG,eAAgB,kBAAMhM,ERzDzB,uCAAO,WAAOA,EAAUC,GAAjB,qBAAA1B,EAAA,sEACsBQ,IADtB,OACFkN,EADE,OAGuB,kBAAnBC,iBACT/K,QAAQC,IAAI,6CACZ6K,EAAgB,IAKXE,EAAW1K,aAAa2K,QAAQ,YAChCC,EAAc5K,aAAa2K,QAAQ,eAEtCD,IACIG,EAAIL,EAAe3K,MAAK,SAAAC,GAAI,OAAGA,EAAKC,MAAQ2K,KAClDnM,EAAS,CACRE,KAAM,cACNC,QAAQ,2BAAKmM,GAAN,IAAS3K,MAAM0K,OAIxBrM,EAAS,CACRE,KAAM,mBACNC,QAAS8L,IAvBJ,2CAAP,6DQ6DcpL,EAvEH,SAAAkB,GAAU,IAUhBwK,EATGrI,EAAoDnC,EAApDmC,iBAAkB6B,EAAkChE,EAAlCgE,eAAgBiG,EAAkBjK,EAAlBiK,eAUzC,OARAhI,qBAAU,WACRgI,IACAjG,MACC,CAAC7B,IAKGA,GACL,IAAK,SACHqI,EAAmB,kBAAC,EAAD,MACnB,MAEF,IAAK,WACHA,EAAmB,kBAAC,EAAD,MACnB,MAEF,IAAK,UACHA,EAAmB,kBAAC,EAAD,MACnB,MAEF,IAAK,cACHA,EAAmB,kBAAC,EAAD,MACnB,MAEF,QACEA,EAAmB,kBAAC,EAAD,MAIvB,OACA,yBAAK9J,UAAU,cAEb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,aACZ8J,QCnDWC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2D,qBCjBOC,EAAe,CAC1BxJ,SAAU,GACVrC,SAAU,IAoCG8L,GAjCK,WAAmC,IAAlC/L,EAAiC,uDAAzB8L,EAAcE,EAAW,uCAEpD,OAAQA,EAAO5M,MAEb,IAAK,YAML,IAAK,mBACH,OAAO,2BACFY,GADL,IAEEsC,SAAU0J,EAAO3M,UAGrB,IAAK,YAML,IAAK,mBACD,OAAO,2BACFW,GADL,IAEEC,SAAU+L,EAAO3M,UAGvB,QACE,OAAOW,ICjBEiM,GAfQ,WAAmC,IAAlCjM,EAAiC,uDAF7B,KAEkBgM,EAAW,uCAEzD,OAAQA,EAAO5M,MAEX,IAAK,cACD,OAAO,2BAAIY,GAAUgM,EAAO3M,SAEhC,IAAK,iBACD,OAAO,KAEX,QACI,OAAOW,ICbF8L,GAAe,CACxBtM,YAAa,SAyBF0M,GAtBK,WAAmC,IAAlClM,EAAiC,uDAAzB8L,GAAcE,EAAW,uCAEtD,OAAQA,EAAO5M,MACX,IAAK,mBACD,OAAO,2BAAIY,GAAX,IAAkBR,YAAawM,EAAOxM,cAE1C,IAAK,oBACD,OAAO,2BAAIQ,GAAX,IAAkBiL,aAAce,EAAOtO,UAE3C,IAAK,aACD,OAAO,2BAAIsC,GAAX,IAAkBuC,OAAQyJ,EAAOrM,OAErC,IAAK,qBACD,OAAO,2BAAIK,GAAX,IAAkBuI,cAAeyD,EAAO3M,UAE5C,IAAK,kBACD,OAAO,2BAAIW,GAAX,IAAkB2H,WAAYqE,EAAO3M,UAEzC,QACI,OAAOW,IClBTmM,GAAmBzC,OAAO0C,sCAAwCC,IAUzDC,GARDC,YAAYC,YAAgB,CACtCjN,KAAM2M,GACNjN,QAASgN,GACT/L,QAASuM,KAEbN,GAAkBO,YAAgBC,OCLlCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUR,MAAOA,IACnB,kBAAC,EAAD,OAFF,KAKA/C,SAASwD,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdxP,OAAM,SAAAyP,GACLjN,QAAQiN,MAAMA,EAAM5P,c","file":"static/js/main.d3c7cadd.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const getPostsRequest = async () => {\n    let message = '' ;\n    const response = await axios.get('/api/posts')\n    .catch(err => message = `Error: , ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const getUsersRequest = async () => {\n    let message = '' ;\n    const response = await axios.get('/api/users')\n    .catch(err => message = `Error: , ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const logInRequest = async (userInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/login', userInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const registerRequest = async (userInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/users', userInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const composeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/posts', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const deleteRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/delete', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const likeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/like', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const dislikeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/dislike', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const searchRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/search', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const userPostsRequest = async (authorId) => {\n    let message = '' ;\n    const response = await axios.post('/api/userPosts', authorId)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const singlepostRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.get(`/api/post/${postInfo}`)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const addCommentRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post(`/api/comments`, postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const deleteCommentRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post(`/api/deletecomment`, postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}","import {registerRequest, logInRequest} from '../../components/utilities/Requests'\n\nexport const setProfileAction = (profile) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'ADD_PROFILE',\n\t\t\tpayload: profile\n\t\t})\n\t}\n}\n\nexport const removeProfileAction = (profile) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({ type: 'REMOVE_PROFILE' })\n\t}\n}\n\nexport const logInAction = (profile) => {\n\treturn async (dispatch, getState) => {\n\t\tconst response = await logInRequest(profile)\n\t\tif(typeof(response)=='string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log('Log in was successful')\n\t\t\tconst allUsers = getState().mongoDb.allUsers\n\t\t\tconst userProfile = allUsers.find(user=> user._id === response._id)\n\n\t\t\tlocalStorage.setItem('storediD', response._id);\n\t\t\tlocalStorage.setItem('storedToken', response.token);\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: {...userProfile, token: response.token}\n\t\t\t})\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\t\tcurrentPage: 'posts'\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const registerUserAction = (profile) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response = await registerRequest(profile)\n\n\t\tif(typeof(response)=='string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log('Registration was successful')\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t}\n}","import {singlepostRequest, userPostsRequest} from '../../components/utilities/Requests'\n\nexport const setCurrentPageAction = (page) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\tcurrentPage: page\n\t\t})\n\t}\n}\n\nexport const setErrorMessageAction = (message) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\tmessage: message\n\t\t})\n\t}\n}\n\nexport const setSearchAction = (text) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH',\n\t\t\ttext: text\n\t\t})\n\t}\n}\n\nexport const setSearchResultsAction = (payload) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH_RESULTS',\n\t\t\tpayload: payload\n\t\t})\n\t}\n}\n\nexport const getUserPostsAction = (authorId) => {\n\treturn async (dispatch, getState) => {\n\t\tconst response =  await userPostsRequest({authorId:authorId})\n\n\t\tif(typeof response === 'string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('User\\'s Posts were retreived.')\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_SEARCH_RESULTS',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const setSinglePostAction = (postId) => {\n\tif(postId){\n\t\treturn async (dispatch, getState) => {\n\t\t\tconst response = await singlepostRequest(postId)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_SINGLE_POST',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t} else {\n\t\treturn (dispatch, getState) => {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_SINGLE_POST',\n\t\t\t\tpayload: null\n\t\t\t})\n\t\t}\n\t}\n}\n","import React, {useState} from 'react';\nimport _ from 'lodash'\nimport '../../styles/LogIn.css';\n\nimport {connect} from 'react-redux'\nimport {setProfileAction, logInAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\n\nconst LogIn = props => {\n    const {setCurrentPage, setErrorMessage, logInRequest} = props\n    const [loginInfo, setLoginInfo] = useState();\n\n    const handleSubmit = event =>{\n        event.preventDefault()\n        const everythingNotFilled = !loginInfo || !loginInfo.name || !loginInfo.password;\n\n        if(everythingNotFilled){\n            setErrorMessage('Error: You have to fill out both fields')\n        }\n        else {\n\t\t\tsetErrorMessage(null)\n            logInRequest(loginInfo)\n        }\n    }\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='loginForm' onKeyDown={onEnterPress}>\n            <input\n                type='text'\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                onChange={(e)=> setLoginInfo({\n                    ...loginInfo,\n                    name:e.target.value.toLowerCase().trim()\n                })}\n            />\n\n            <input\n                type='password'\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                onChange={(e)=> setLoginInfo({\n                    ...loginInfo,\n                    password:e.target.value.trim()\n                })}\n            />\n\n            <div className='btns'>\n                <button className='btns' onClick={()=> {\n                    setErrorMessage(null)\n                    setCurrentPage('posts')\n                    }}> Cancel </button>\n                <button className='btns submit' type=\"submit\">Submit</button>\n            </div>\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        logInRequest: profile => dispatch(logInAction(profile)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn)","import React, {useEffect, useState} from 'react'\nimport {searchRequest} from '../utilities/Requests'\nimport {connect} from 'react-redux'\nimport {setErrorMessageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nconst Search = props => {\n    const {setErrorMessage, setSearch, search, allPosts, setSearchResults} = props\n\n    const [SearchInputText, setSearchInputText] = useState()\n\n    const getSearchResults = async searchText => {\n        console.log(`Searching for posts with ${searchText} hashtag`)\n        const response = await searchRequest({\n            payload : searchText.toLowerCase()\n        })\n\n        if(typeof response === 'string'){\n            console.log(response)\n            setErrorMessage(response)\n        } else {\n            setErrorMessage(null)\n\n            const final = allPosts.filter(post => {\n                for(let i=0; i<response.length; i++){\n                    if (response[i] === post._id){\n                        return post\n                    }\n                }\n            })\n\n            setSearchResults(final)\n        }\n    }\n\n    useEffect(()=>{\n        if(search === ''){\n            setSearch(null)\n            setSearchResults(null)\n        } else if(search) {\n            getSearchResults(search)\n        }\n    }, [search])\n\n    const handleSearch = async e =>{\n        e.preventDefault()\n        console.log(`search submitted ${SearchInputText}`)\n        setSearch(SearchInputText)\n    }\n\n    return (\n        <form onSubmit={handleSearch}>\n            <input\n                type='text'\n                name='search'\n                placeholder=\"Search for Hashtag here\"\n                onChange = {text =>{\n                    setSearchInputText(text.target.value)\n                }}\n                value={SearchInputText}\n            />\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        search: state.page.search\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setErrorMessage: message => dispatch(setErrorMessageAction(message)),\n        setSearch: text => dispatch(setSearchAction(text)),\n        setSearchResults: payload => dispatch(setSearchResultsAction(payload))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search)","import React, {useState} from 'react'\nimport _ from 'lodash'\nimport '../../styles/Sidebar.css';\nimport Search from './Search'\nimport {connect} from 'react-redux'\nimport {FaTwitter} from 'react-icons/fa'\nimport {setProfileAction, removeProfileAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nconst Sidebar = props =>{\n    const {removeProfile, reduXprofile, reduXcurrentPage, setCurrentPage, setSearch, setSearchResults, setErrorMessage} = props\n\n    const searchField = <Search />\n\n    const handleLogoClick = e =>{\n        e.preventDefault()\n        setSearch(null)\n        setSearchResults(null)\n        setErrorMessage(null)\n        setCurrentPage('posts')\n    }\n\n    const twitterLogo = <div className='page-logo' onClick={handleLogoClick}> <FaTwitter/> </div>\n\n\n    // if not logged in and posts page\n    // show login/register button\n    if( _.isEmpty(reduXprofile) &&\n        (reduXcurrentPage==='posts' || reduXcurrentPage==='single-page')\n    ){\n        return (\n        <>\n        {twitterLogo}\n        <button className=\"login-btn\" onClick={()=>setCurrentPage('log-in')}>Log In </button>\n        <button className=\"register-btn\" onClick={()=>setCurrentPage('register') }>Register </button>\n        {searchField}\n        </>\n        )\n    }\n\n    // if login, register, or compose\n    // show current page label\n    else if(\n        reduXcurrentPage==='log-in'||\n        reduXcurrentPage==='register'||\n        reduXcurrentPage==='compose'\n        ){\n        return(\n        <>\n        {\n            reduXcurrentPage!=='compose'?\n            twitterLogo :\n            <div\n                className='profile-name compose-profile-name'\n                onClick={handleLogoClick}\n                style={{background: reduXprofile.color}}\n            >\n            {reduXprofile.name}\n            </div>\n        }\n        <div className=\"page-label\">\n            {reduXcurrentPage==='log-in'? 'Log In': reduXcurrentPage}\n        </div>\n        </>\n        )\n    }\n\n    // else person is logged in\n    // so show the profile on the page\n    // with logout and compose button\n    else{\n        return (\n        <div className='profile'>\n            <div\n                className='profile-name'\n                onClick={handleLogoClick}\n                style={{background: reduXprofile.color}}\n            >\n            {reduXprofile.name}\n            </div>\n\n        <button onClick={()=>setCurrentPage('compose')}> Compose </button>\n\n        <button onClick={()=>{\n            console.log('Logged out.')\n            removeProfile()\n            localStorage.removeItem('storediD');\n            localStorage.removeItem('storedToken');\n            setErrorMessage('You are now logged out. Hope to see you again soon.')\n            setCurrentPage('posts')\n            }}> Log Out</button>\n\n            {searchField}\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        reduXcurrentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        removeProfile: () => dispatch(removeProfileAction()),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setSearch: text => dispatch(setSearchAction(text)),\n        setSearchResults: payload => dispatch(setSearchResultsAction(payload)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar)","import React, {useState, useRef} from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {connect} from 'react-redux'\nimport '../../styles/Register.css';\nimport {setProfileAction, registerUserAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Register = props => {\n    const {registerUser, setCurrentPage, setErrorMessage} = props\n    const [registerInfo, setRegisterInfo] = useState();\n    const rePasswordEl = useRef();\n\n    // when submit button is pressed\n    const handleSubmit = event => {\n        event.preventDefault()\n\n        const everythingNotFilled = !registerInfo || !registerInfo.name || !registerInfo.password || !registerInfo.rePassword || !registerInfo.color;\n\n        if(everythingNotFilled){\n            setErrorMessage('Error: You have to fill out all fields')\n        }\n        else {\n            const passwordsDontMatch = registerInfo.password !== registerInfo.rePassword\n\n            const nameHasBlank = registerInfo.name.split('').includes(' ')\n\n            if(passwordsDontMatch){\n                rePasswordEl.current.style.backgroundColor = \"#FFE1E1\";\n                setErrorMessage('Error: Passwords do not match')\n            }\n            else if(nameHasBlank) {\n                setErrorMessage('Error: Name can\\'t have any spaces')\n            }\n            else {\n                rePasswordEl.current.style.backgroundColor = \"white\";\n                setErrorMessage('')\n                setCurrentPage('posts')\n                registerUser(registerInfo)\n            }\n        }\n    }\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='registerForm' onKeyDown={onEnterPress}>\n            <input\n                type='text'\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    name : e.target.value.toLowerCase().trim()\n                })}\n            />\n            <input\n                type='password'\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    password : e.target.value.trim()\n                })}\n            />\n            <input\n                type='password'\n                name=\"rePassword\"\n                ref={rePasswordEl}\n                placeholder=\"Re-enter your password\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    rePassword : e.target.value.trim()\n                })}\n            />\n\n            <div className='color-btns'>\n                <div className='color-btns-label'>\n                    <p> Choose a color: </p>\n                </div>\n                <div className='color-btns-choices'>\n                <TwitterPicker\n                    triangle='hide'\n                    onChangeComplete={(color, event)=>{\n                        setRegisterInfo({\n                            ...registerInfo,\n                            color : color.hex\n                        })\n                }}/>\n                </div>\n            </div>\n\n\n            <div className='btns'>\n                <button onClick={()=> {\n                    setCurrentPage('posts')\n                    setErrorMessage(null)\n                    }}> Cancel </button>\n                <button className='btns submit'type='submit'>Submit</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        registerUser: profile => dispatch(registerUserAction(profile)) ,\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","import {getPostsRequest, getUsersRequest, deleteRequest, likeRequest, dislikeRequest} from '../../components/utilities/Requests'\n\nexport const updateAllPostsAction = () => {\n\treturn async (dispatch, getState) => {\n\t\tconst response =  await getPostsRequest()\n\n\t\tif(typeof response === 'string'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'UPDATE_ALL_POSTS',\n\t\t\t\tpayload: []\n\t\t\t})\n\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Posts were updated.')\n\t\t\tdispatch({\n\t\t\t\ttype: 'UPDATE_ALL_POSTS',\n\t\t\t\tpayload: response\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const updateAllUsersAction = () => {\n\treturn async (dispatch, getState) => {\n\t\tlet requestedUsers =  await getUsersRequest()\n\n\t\tif(typeof requestedPosts === 'string'){\n\t\t\tconsole.log('There was a connection error with the DB.')\n\t\t\trequestedUsers= []\n\t\t}\n\n\t\t// console.log(requestedUsers)\n\n\t\tconst storediD = localStorage.getItem('storediD');\n\t\tconst storedToken = localStorage.getItem('storedToken');\n\n\t\tif(storediD){\n\t\t\tconst f = requestedUsers.find(user=> user._id === storediD)\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: {...f, token:storedToken}\n\t\t\t})\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: 'UPDATE_ALL_USERS',\n\t\t\tpayload: requestedUsers\n\t\t})\n\t}\n}\n\n//\n// SINGLE POST\n//\n\nexport const deletePostAction = (tokenPostInfo) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response =  await deleteRequest(tokenPostInfo)\n\n\t\tif(response !== 'OK'){\n\t\t\tconsole.log(response)\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Post was successfully deleted.')\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\t\tcurrentPage: 'posts'\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport const addLikeAction = (tokenPostInfo) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response = await likeRequest(tokenPostInfo)\n\n\t\tif(response !== 'OK'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Like was added.')\n\t\t}\n\t}\n}\n\nexport const removeLikeAction = (tokenPostInfo) => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst response = await dislikeRequest(tokenPostInfo)\n\n\t\tif(response !== 'OK'){\n\t\t\tconsole.log(response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\t\tmessage: response\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Like was removed.')\n\t\t}\n\t}\n}","import React from 'react'\nimport { FaRegHeart } from \"react-icons/fa\"\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction, addLikeAction, removeLikeAction} from '../../reduxStore/actions/mongoDb'\nimport {setSinglePostAction} from '../../reduxStore/actions/page'\n\nconst LikeButton = props => {\n    const {reduXprofile, updateAllPosts, currentPage, setSinglePost} = props\n    const {post, addLikeRequest, removeLikeRequest} = props;\n\n    // if user is able to like, make it red\n    let style = {};\n\n    const userDidntLikedBefore = reduXprofile && post.authorId !== reduXprofile._id && !post.likes.includes(reduXprofile._id)\n\n    const userLikedBefore = reduXprofile && post.authorId !== reduXprofile._id && post.likes.includes(reduXprofile._id)\n\n    if(userDidntLikedBefore){\n        style = {color:'black', cursor:'pointer', opacity:1}\n    }\n\n    else if(userLikedBefore){\n        style = {color:'red', cursor:'pointer', opacity:1}\n    }\n\n    return (\n        <button className=\"like\" onClick={ async event => {\n            if(userDidntLikedBefore){\n                await addLikeRequest({\n                    token:reduXprofile.token,\n                    _id:post._id\n                })\n            }\n            else if(userLikedBefore){\n                await removeLikeRequest({\n                    token:reduXprofile.token,\n                    _id:post._id\n                })\n            }\n\n            // reload the page\n            if(currentPage === 'posts'){\n                await updateAllPosts()\n            }\n            else if(currentPage === 'single-page') {\n                await setSinglePost(post._id)\n            }\n        }} style={style}>\n            <label>{post.likes.length}</label>\n            <FaRegHeart className='heart'/>\n        </button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        currentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateAllPosts: () => dispatch(updateAllPostsAction()),\n        addLikeRequest: (tokenPostInfo) => dispatch(addLikeAction(tokenPostInfo)),\n        removeLikeRequest: (tokenPostInfo) => dispatch(removeLikeAction(tokenPostInfo)),\n        setSinglePost: postId => dispatch(setSinglePostAction(postId))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LikeButton)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction, deletePostAction} from '../../reduxStore/actions/mongoDb'\nimport {setCurrentPageAction} from '../../reduxStore/actions/page'\n\nconst DeleteButton = props => {\n    const {reduXprofile, updateAllPosts, deletePostRequest} = props\n    const {post} = props\n\n    // handle delete button pressed\n    const handleDeleteClick = async e => {\n        e.preventDefault()\n        await deletePostRequest({\n            token:reduXprofile.token,\n            _id:post._id\n        })\n        updateAllPosts()\n    }\n\n    return (\n        <button\n            className=\"delete\"\n            onClick={handleDeleteClick}>\n        Delete\n        </button>\n        )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateAllPosts: () => dispatch(updateAllPostsAction()),\n        deletePostRequest: (tokenPostInfo) => dispatch(deletePostAction(tokenPostInfo)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteButton)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {FaRegCommentAlt} from 'react-icons/fa'\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport {setSearchAction, setCurrentPageAction, setSinglePostAction, getUserPostsAction} from '../../reduxStore/actions/page'\nimport {updateAllPostsAction} from '../../reduxStore/actions/mongoDb'\n\nconst Post = props => {\n    const {setSearch, allUsers, reduXprofile, setCurrentPage, setSinglePost, currentPage, getUserPosts} = props\n    const {post} = props\n\n    let authorProfile = allUsers.find(user => user._id === post.authorId)\n\n    if(!authorProfile){\n        authorProfile = {\n            name:'User no longer exists',\n            color: 'red'\n        }\n    }\n\n\n    const getFinalText = (postText, allUsers) => {\n        return (\n            <>\n            {postText.split(/\\s+/).map(word => {\n\n                if(word.startsWith('#')){\n                    return (\n                        <button\n                            onClick={()=>hashtagClick(word)}\n                            className='hashtag'\n                        >\n                        {word}\n                        </button>)\n                }\n                else if(word.startsWith('@')){\n                    const mentioned = allUsers.find(user=> user.name === word.toLowerCase().substring(1))\n\n                    let style={}\n\n                    if(mentioned){\n                        style = {background:mentioned.color, color: 'black'}\n                    }\n\n                    return (\n                        <button\n                            style={style}\n                            className='hashtag'\n                        >\n                        {word}\n                        </button>)\n                }\n\n                else {\n                    return word + ' '\n                }\n            })}\n            </>\n        )\n    }\n\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    const postClick = async () => {\n        await setSinglePost(post._id)\n        setCurrentPage('single-page')\n    }\n\n    const hashtagClick = hashtag => {\n        setCurrentPage('posts')\n        setSinglePost(null)\n        setSearch(hashtag)\n    }\n\n    return (\n    <li className='post'>\n        <div className='post-header'>\n            <div\n                className='info-name'\n                onClick={()=>{\n                    getUserPosts(authorProfile._id)\n                    if(currentPage !== 'posts'){\n                        setCurrentPage('posts')\n                    }\n                }}\n                >\n                <div\n                    className='icon-color'\n                    style={{background:authorProfile.color}}\n                />\n                <h3>{authorProfile.name}</h3>\n            </div>\n            <div className='like-comment-icons'>\n            {\n            currentPage==='posts'?\n            <el onClick={postClick} className='comments'>\n                <label> {post.comments?post.comments.length:0} </label>\n                <FaRegCommentAlt className='commentbox'/>\n            </el> : ''\n            }\n            <LikeButton post={post} />\n            </div>\n        </div>\n\n        <div className='post-body'>\n            <p className='text'>{getFinalText(post.payload, allUsers)}</p>\n        </div>\n\n        <div className='post-footer'>\n            <div className='date-comments'>\n                <p className='date'>{getFullDate(post.date)}</p>\n            </div>\n            {\n            reduXprofile && reduXprofile._id === post.authorId?\n            <DeleteButton post={post} /> : ''\n            }\n\n        </div>\n    </li>\n    )\n}\n\nconst getFullDate = (postDate) => {\n    const months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    const d = new Date(postDate)\n    const date =`${months[d.getMonth()]} ${d.getDate()}, ${d.getFullYear()}`\n    const timeHours = d.getHours() > 12 ? d.getHours() - 12 : d.getHours()\n    const timeMinutes = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes()\n    const ampm = d.getHours() >= 12 ? 'pm' : 'am';\n    return `${date} | ${timeHours}:${timeMinutes} ${ampm}`\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        currentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setSearch: text => dispatch(setSearchAction(text)),\n        getUserPosts: authorId => dispatch(getUserPostsAction(authorId)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        updateAllPosts: () => dispatch(updateAllPostsAction()),\n        setSinglePost: postId => dispatch(setSinglePostAction(postId))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","import React, {useState} from 'react'\nimport {connect} from 'react-redux'\nimport {addCommentRequest, deleteCommentRequest} from '../utilities/Requests'\nimport {setSinglePostAction} from '../../reduxStore/actions/page'\n\nimport Post from '../post/Post'\nimport '../../styles/SinglePage.css'\n\nconst SinglePage = props => {\n    const [commentText, setCommentText] = useState()\n    const {singlePost, profile, allUsers, setSinglePost} = props\n\n    const handleComment = async e => {\n        e.preventDefault()\n\n        const commentPayload = {\n            token: profile.token,\n            _id: singlePost._id,\n            message: commentText.trim()\n        }\n\n        const response = await addCommentRequest(commentPayload)\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Comment was added.')\n            setCommentText('')\n            await setSinglePost(singlePost._id)\n        }\n\n    }\n\n    const form = (\n                <form onSubmit={handleComment}>\n                    <input\n                        type='text'\n                        name=\"comment\"\n                        className='comment-input'\n                        value={commentText}\n                        placeholder=\"Enter your comment here\"\n                        onChange={e=>setCommentText(e.target.value)}\n                    />\n                </form>\n                )\n\n    const handleDeleteComment = async commentId => {\n        const commentPayload = {\n            token: profile.token,\n            postId: singlePost._id,\n            commentId: commentId\n        }\n\n        const response = await deleteCommentRequest(commentPayload)\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Comment was added.')\n            await setSinglePost(singlePost._id)\n        }\n    }\n\n    const allComments = singlePost.comments?\n                        singlePost.comments.map(comment=>{\n\n                            let author\n                            if(allUsers){\n                                author = allUsers.find(user=> user._id === comment.authorId)\n                            }\n\n                            return (\n                            <div className='single-comment' style={{borderRight: `10px solid ${author.color}`}}>\n                                <div>\n                                    <span> {`${author.name}: `} </span>\n                                    {comment.message}\n                                </div>\n\n                                {\n                                profile && (comment.authorId === profile._id) ?\n                                <button\n                                    className='delete-comment'\n                                    onClick={e=>{\n                                        e.preventDefault()\n                                        handleDeleteComment(comment._id)\n                                    }}\n                                > Delete </button> : ''\n                                }\n\n                            </div>\n                            )\n                        }) : ''\n\n\n    return (\n        <div>\n            <Post post={singlePost} />\n\n            <div className='comments-page'>\n                <div className='comments-loop'>\n                    {allComments}\n                </div>\n                {profile? form : ''}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        singlePost: state.page.singlePost,\n        profile: state.profile,\n        allUsers: state.mongoDb.allUsers\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setSinglePost: postId => dispatch(setSinglePostAction(postId))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePage)","import React from 'react';\nimport _ from 'lodash'\n\nimport Post from './post/Post'\nimport '../styles/Posts.css';\nimport {connect} from 'react-redux'\n\nconst Posts = props => {\n    const {allPosts, searchResults} = props\n    const {addPost} = props\n\n    let postsToShow = allPosts;\n    if(searchResults) { postsToShow = searchResults }\n\n    if(!_.isEmpty(postsToShow) && typeof postsToShow !=='string'){\n        return (\n            <ul>\n            {\n                postsToShow.slice(0).reverse().map(post => <Post\n                        key={post._id}\n                        {...{\n                            post,\n                            addPost\n                        }}\n                    />)\n            }\n            </ul>\n            )\n    } else {\n            return (\n                <div className='emptyPosts'>\n                    {/* <img src='https://media.giphy.com/media/26hkhPJ5hmdD87HYA/giphy.gif' alt='none found'/> */}\n                    <p>Unfortunately there are no posts</p>\n            </div>)\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts:state.mongoDb.allPosts,\n        searchResults:state.page.searchResults\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts)","import React, {useState, useRef, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport '../../styles/Compose.css';\n\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Compose = props => {\n\n    const [html, setHTML] = useState()\n    const [caretPos, setCaretPos] = useState(0)\n    const [caretNode, setCaretNode] = useState(0)\n    const textAreaEl = useRef()\n\n    const getCaretPosition = shift => {\n        console.log('-> get Caret position')\n\n        if (window.getSelection && window.getSelection().getRangeAt) {\n            var range = window.getSelection().getRangeAt(0);\n            var selectedObj = window.getSelection();\n            var childNodes = selectedObj.anchorNode.parentNode.childNodes;\n\n            console.log('selectedObj.anchorNode', selectedObj.anchorNode)\n\n            for (var i = 0; i < childNodes.length; i++) {\n                if (childNodes[i] === selectedObj.anchorNode) {\n                    console.log('childnode: ', i, childNodes[i])\n                    console.log(\n                        'nodeType: ',\n                        childNodes[i].nodeType\n                    )\n                    // figured out node type is different for text\n                    // and for span but coming out as if its the same\n                    // on console of el it comes out as an object\n\n                    setCaretNode(i)\n                }\n            }\n\n            console.log('offset: ', range.startOffset)\n            console.log('')\n\n            setCaretPos(range.startOffset + shift)\n        }\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const setCaret = () => {\n        console.log('-> set Caret')\n        var el = textAreaEl.current\n        var range = document.createRange()\n        var sel = window.getSelection()\n\n        console.log(textAreaEl)\n        console.log('el.childNodes[caretNode]: ', el.childNodes[caretNode])\n        console.log('caretPos', caretPos)\n        console.log('')\n\n        range.setStart(el.childNodes[caretNode], caretPos)\n        range.collapse(true)\n\n        sel.removeAllRanges()\n        sel.addRange(range)\n    }\n\n    useEffect(() => {\n        // if textArea has childnodes setCaret\n        // to position before re-render\n        if(textAreaEl.current.childNodes.length>0){\n            setCaret()\n        }\n    }, [html, setCaret])\n\n    let shift = 0\n\n    return (\n        <div\n            contentEditable = 'true'\n            className = 'test'\n            placeholder = 'type something here'\n            ref = {textAreaEl}\n            dangerouslySetInnerHTML={{__html: html}}\n            onKeyUp = { e => {\n\n                const inputText = textAreaEl.current.innerText\n\n                // if @ or # should shift after re-rendering\n                console.log(e.keyCode)\n                if(e.keyCode === 51 || e.keyCode === 50){\n                    shift -= 1\n                }\n\n                // composing final JSX\n                let final = ''\n\n                inputText.split(/\\s+/).forEach( word => {\n                    if(word.startsWith('#')){\n                        final += `<span class='hashtag'>${word}</span> `\n                    }\n                    else if(word.startsWith('@')){\n                        final += `<span class='mention'>${word}</span> `\n                    }\n                    else {\n                        final += `${word} `\n                    }\n                })\n\n                if(e.keyCode === 32 ){\n                } else {\n                    setHTML(final)\n                    getCaretPosition(shift)\n                }\n\n            }\n            }\n        />\n    )\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Compose)","import React from 'react'\nimport '../../styles/Errors.css'\nimport {connect} from 'react-redux'\nimport {setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Errors = props => {\n    const {reduXerrorMessage, setErrorMessage} = props\n\n    if(reduXerrorMessage){\n        return (\n            <div className='errors' onClick={()=> setErrorMessage(null)}>\n                {reduXerrorMessage}\n            </div>\n        )\n    } else {\n        return <div></div>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        reduXerrorMessage: state.page.errorMessage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Errors);","import React, {useEffect} from 'react'\n\nimport LogIn from './actions/LogIn'\nimport Sidebar from './sidebar/Sidebar'\nimport Register from './actions/Register'\nimport SinglePage from './actions/SinglePage'\n\nimport '../styles/App.css';\nimport '../styles/MediaQueries.css';\n\nimport Posts from './Posts'\nimport Compose from './actions/Compose'\nimport Errors from './utilities/Errors'\n\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction, updateAllUsersAction} from '../reduxStore/actions/mongoDb'\nimport {setProfileAction} from '../reduxStore/actions/profile'\nimport {setErrorMessageAction} from '../reduxStore/actions/page'\n\nconst App = props => {\n  const {reduXcurrentPage, updateAllPosts, updateAllUsers} = props\n\n  useEffect(() => {\n    updateAllUsers()\n    updateAllPosts()\n  }, [reduXcurrentPage])\n\n\n  // depending on currentPage show adequate component;\n  let currentComponent\n  switch(reduXcurrentPage) {\n    case 'log-in':\n      currentComponent = <LogIn />\n      break;\n\n    case 'register':\n      currentComponent = <Register />\n      break;\n\n    case 'compose':\n      currentComponent = <Compose />\n      break;\n\n    case 'single-page':\n      currentComponent = <SinglePage />\n      break;\n\n    default:\n      currentComponent = <Posts />\n  }\n\n\n  return (\n  <div className=\"global-app\">\n\n    <Errors />\n\n    <div className='App'>\n      <div className='sidebar'>\n        <Sidebar />\n      </div>\n\n      <div className='container'>\n        {currentComponent}\n      </div>\n    </div>\n  </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  // console.log(state)\n\n  return {\n    reduXprofile: state.profile,\n    allUsers: state.mongoDb.allUsers,\n    reduXcurrentPage: state.page.currentPage,\n    reduXerrorMessage: state.page.errorMessage\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setProfile: profile => dispatch(setProfileAction(profile)),\n    setErrorMessage: message => dispatch(setErrorMessageAction(message)),\n    updateAllPosts: () => dispatch(updateAllPostsAction()),\n    updateAllUsers: () => dispatch(updateAllUsersAction())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const initialState = {\n  allPosts: {},\n  allUsers: {}\n}\n\nconst postReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case 'ADD_POSTS':\n      return {\n        ...state,\n        allPosts: action.payload\n      }\n\n    case 'UPDATE_ALL_POSTS':\n      return {\n        ...state,\n        allPosts: action.payload\n      }\n\n    case 'ADD_USERS':\n      return {\n        ...state,\n        allUsers: action.payload\n      }\n\n    case 'UPDATE_ALL_USERS':\n        return {\n          ...state,\n          allUsers: action.payload\n        }\n\n    default:\n      return state\n  }\n}\n\nexport default postReducer","\nexport const initialState = null\n\nconst profileReducer = (state = initialState, action) => {\n\nswitch (action.type) {\n\n    case 'ADD_PROFILE':\n        return {...state, ...action.payload}\n    \n    case 'REMOVE_PROFILE':\n        return null\n\n    default:\n        return state\n\n}}\n\nexport default profileReducer","\nexport const initialState = {\n    currentPage: 'posts'\n}\n\nconst pageReducer = (state = initialState, action) => {\n\nswitch (action.type) {\n    case 'SET_CURRENT_PAGE':\n        return {...state, currentPage: action.currentPage}\n\n    case 'SET_ERROR_MESSAGE':\n        return {...state, errorMessage: action.message}\n\n    case 'SET_SEARCH':\n        return {...state, search: action.text}\n\n    case 'SET_SEARCH_RESULTS':\n        return {...state, searchResults: action.payload}\n    \n    case 'SET_SINGLE_POST':\n        return {...state, singlePost: action.payload}\n\n    default:\n        return state\n}}\n\nexport default pageReducer","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport mongoReducer from './reducers/mongoReducer'\nimport profileReducer from './reducers/profileReducer'\nimport pageReducer from './reducers/pageReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(combineReducers({\n    page: pageReducer,\n    profile: profileReducer,\n    mongoDb: mongoReducer\n}),\ncomposeEnhancers( applyMiddleware(thunk) )\n)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './reduxStore/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}