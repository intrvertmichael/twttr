{"version":3,"sources":["components/utilities/Requests.js","reduxStore/actions/profile.js","reduxStore/actions/page.js","components/actions/LogIn.js","components/sidebar/Search.js","components/sidebar/Sidebar.js","components/actions/Register.js","components/actions/SinglePage.js","reduxStore/actions/mongoDb.js","components/post/LikeButton.js","components/post/DeleteButton.js","components/post/Post.js","components/Posts.js","components/actions/Compose.js","components/utilities/Errors.js","components/App.js","serviceWorker.js","reduxStore/reducers/mongoReducer.js","reduxStore/reducers/profileReducer.js","reduxStore/reducers/pageReducer.js","reduxStore/store.js","index.js"],"names":["getPostsRequest","a","message","axios","get","catch","err","response","data","getUsersRequest","logInRequest","userInfo","post","registerRequest","composeRequest","postInfo","deleteRequest","likeRequest","dislikeRequest","searchRequest","singlepostRequest","setProfileAction","profile","dispatch","getState","type","payload","setCurrentPageAction","page","currentPage","setErrorMessageAction","setSearchAction","text","setSearchResultsAction","connect","state","allUsers","mongoDb","reduXprofile","setProfile","setCurrentPage","setErrorMessage","props","useState","loginInfo","setLoginInfo","handleSubmit","event","preventDefault","name","password","server_LogInRequest","console","log","userProfile","find","user","_id","token","localStorage","setItem","onSubmit","className","onKeyDown","e","keyCode","placeholder","onChange","target","value","toLowerCase","trim","onClick","allPosts","search","setSearch","setSearchResults","SearchInputText","setSearchInputText","getSearchResults","searchText","final","filter","i","length","useEffect","handleSearch","reduXcurrentPage","removeProfile","searchField","handleLogoClick","twitterLogo","_","isEmpty","style","background","color","removeItem","registerInfo","setRegisterInfo","rePasswordEl","useRef","rePassword","passwordsDontMatch","nameHasBlank","split","includes","current","backgroundColor","server_RegisterRequest","ref","triangle","onChangeComplete","hex","SinglePage","updateAllPostsAction","requestedPosts","updateAllPosts","server_AddLike","server_RemoveLike","userDidntLikedBefore","authorId","likes","userLikedBefore","cursor","opacity","handleDeleteClick","server_DeleteRequest","getFullDate","postDate","d","Date","date","getMonth","getDate","getFullYear","timeHours","getHours","timeMinutes","getMinutes","ampm","authorProfile","postClick","res","hashtagClick","hashtag","postText","map","word","startsWith","mentioned","substring","getFinalText","searchResults","addPost","postsToShow","src","alt","slice","reverse","key","compose","setCompose","textAreaEl","server_composeRequest","reduXerrorMessage","errorMessage","reduXaddPosts","posts","addPostsAction","reduXaddUsers","users","addUsersAction","updateAllUsers","requestedUsers","storediD","getItem","storedToken","f","currentComponent","Boolean","window","location","hostname","match","initialState","postReducer","action","profileReducer","pageReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","combineReducers","mongoReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"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","file":"static/js/main.0f550e85.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const getPostsRequest = async () => {\n    let message = '' ;\n    const response = await axios.get('/api/posts')\n    .catch(err => message = `Error: , ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const getUsersRequest = async () => {\n    let message = '' ;\n    const response = await axios.get('/api/users')\n    .catch(err => message = `Error: , ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const logInRequest = async (userInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/login', userInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const registerRequest = async (userInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/users', userInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const composeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/posts', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const deleteRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/delete', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const likeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/like', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const dislikeRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/dislike', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const searchRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.post('/api/search', postInfo)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}\n\nexport const singlepostRequest = async (postInfo) => {\n    let message = '' ;\n    const response = await axios.get(`/api/post/${postInfo}`)\n    .catch(err => message = `Error: ${err.response.data}`)\n    return message!==''? message : response.data;\n}","export const setProfileAction = (profile) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'ADD_PROFILE',\n\t\t\tpayload: profile\n\t\t})\n\t}\n}\n\nexport const removeProfileAction = (profile) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({ type: 'REMOVE_PROFILE' })\n\t}\n}","export const setCurrentPageAction = (page) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_CURRENT_PAGE',\n\t\t\tcurrentPage: page\n\t\t})\n\t}\n}\n\nexport const setErrorMessageAction = (message) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_ERROR_MESSAGE',\n\t\t\tmessage: message\n\t\t})\n\t}\n}\n\nexport const setSearchAction = (text) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH',\n\t\t\ttext: text\n\t\t})\n\t}\n}\n\nexport const setSearchResultsAction = (payload) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'SET_SEARCH_RESULTS',\n\t\t\tpayload: payload\n\t\t})\n\t}\n}","import React, {useState} from 'react';\nimport _ from 'lodash'\nimport {logInRequest} from '../utilities/Requests'\nimport '../../styles/LogIn.css';\n\nimport {connect} from 'react-redux'\nimport {setProfileAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\n\nconst LogIn = props => {\n    const {allUsers, setProfile, setCurrentPage, setErrorMessage} = props\n    // const {addErrorMessage} = props\n    const [loginInfo, setLoginInfo] = useState();\n\n    const handleSubmit = async event =>{\n        event.preventDefault()\n        const everythingNotFilled = !loginInfo || !loginInfo.name || !loginInfo.password;\n\n        if(everythingNotFilled){\n            setErrorMessage('Error: You have to fill out both fields')\n        } else {\n            server_LogInRequest()\n        }\n    }\n\n    const server_LogInRequest = async () => {\n        const response = await logInRequest(loginInfo)\n        if(typeof(response)=='string'){\n            console.log(response)\n            setErrorMessage(response)\n        } else {\n            console.log('Log in was successful')\n\n            const userProfile = allUsers.find(user=> user._id === response._id)\n            console.log('-> ', userProfile, response.token)\n            // if(_.isEmpty(reduXprofile)){\n                setProfile({...userProfile, token: response.token})\n            // }\n\n            setCurrentPage('posts');\n            setErrorMessage(null)\n            localStorage.setItem('storediD', response._id);\n            localStorage.setItem('storedToken', response.token);\n        }\n    }\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='loginForm' onKeyDown={onEnterPress}>\n            <input\n                type='text'\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                onChange={(e)=> setLoginInfo({\n                    ...loginInfo,\n                    name:e.target.value.toLowerCase().trim()\n                })}\n            />\n\n            <input\n                type='password'\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                onChange={(e)=> setLoginInfo({\n                    ...loginInfo,\n                    password:e.target.value.trim()\n                })}\n            />\n\n            <div className='btns'>\n                <button className='btns' onClick={()=> {\n                    setErrorMessage(null)\n                    setCurrentPage('posts')\n                    }}> Cancel </button>\n                <button className='btns submit' type=\"submit\">Submit</button>\n            </div>\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn)","import React, {useEffect, useState} from 'react'\nimport {searchRequest} from '../utilities/Requests'\nimport {connect} from 'react-redux'\nimport {setErrorMessageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nconst Search = props => {\n    const {setErrorMessage, setSearch, search, allPosts, setSearchResults} = props\n\n    const [SearchInputText, setSearchInputText] = useState()\n\n    const getSearchResults = async searchText => {\n        console.log(`Searching for posts with ${searchText} hashtag`)\n        const response = await searchRequest({\n            payload : searchText.toLowerCase()\n        })\n\n        if(typeof response === 'string'){\n            console.log(response)\n            setErrorMessage(response)\n        } else {\n            setErrorMessage(null)\n\n            const final = allPosts.filter(post => {\n                for(let i=0; i<response.length; i++){\n                    if (response[i] === post._id){\n                        return post\n                    }\n                }\n            })\n\n            setSearchResults(final)\n        }\n    }\n\n    useEffect(()=>{\n        if(search === ''){\n            setSearch(null)\n            setSearchResults(null)\n        } else if(search) {\n            getSearchResults(search)\n        }\n    }, [search])\n\n    const handleSearch = async e =>{\n        e.preventDefault()\n        console.log(`search submitted ${SearchInputText}`)\n        setSearch(SearchInputText)\n    }\n\n    return (\n        <form onSubmit={handleSearch}>\n            <input\n                type='text'\n                name='search'\n                placeholder=\"Search for Hashtag here\"\n                onChange = {text =>{\n                    setSearchInputText(text.target.value)\n                }}\n                value={SearchInputText}\n            />\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        search: state.page.search\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setErrorMessage: message => dispatch(setErrorMessageAction(message)),\n        setSearch: text => dispatch(setSearchAction(text)),\n        setSearchResults: payload => dispatch(setSearchResultsAction(payload))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search)","import React, {useState} from 'react'\nimport _ from 'lodash'\nimport '../../styles/Sidebar.css';\nimport Search from './Search'\nimport {connect} from 'react-redux'\nimport {FaTwitter} from 'react-icons/fa'\nimport {setProfileAction, removeProfileAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setSearchAction, setSearchResultsAction} from '../../reduxStore/actions/page'\n\nconst Sidebar = props =>{\n    const {removeProfile, reduXprofile, reduXcurrentPage, setCurrentPage, setSearch, setSearchResults} = props\n\n    const searchField = <Search />\n\n    const handleLogoClick = e =>{\n        e.preventDefault()\n        setSearch(null)\n        setSearchResults(null)\n        setCurrentPage('posts')\n    }\n\n    const twitterLogo = <div className='page-logo' onClick={handleLogoClick}> <FaTwitter/> </div>\n\n\n    // if not logged in and posts page\n    // show login/register button\n    if( _.isEmpty(reduXprofile) &&\n        (reduXcurrentPage==='posts' || reduXcurrentPage==='single-page')\n    ){\n        return (\n        <>\n        {twitterLogo}\n        <button className=\"login-btn\" onClick={()=>setCurrentPage('log-in')}>Log In </button>\n        <button className=\"register-btn\" onClick={()=>setCurrentPage('register') }>Register </button>\n        {searchField}\n        </>\n        )\n    }\n\n    // if login, register, or compose\n    // show current page label\n    else if(\n        reduXcurrentPage==='log-in'||\n        reduXcurrentPage==='register'||\n        reduXcurrentPage==='compose'\n        ){\n        return(\n        <>\n        {reduXcurrentPage!=='compose'? twitterLogo: ''}\n        <div className=\"page-label\">\n            {reduXcurrentPage==='log-in'? 'Log In': reduXcurrentPage}\n        </div>\n        </>\n        )\n    }\n\n    // else person is logged in\n    // so show the profile on the page\n    // with logout and compose button\n    else{\n        return (\n        <div className='profile'>\n            <div\n                className='profile-name'\n                onClick={handleLogoClick}\n                style={{background: reduXprofile.color}}\n            >\n            {reduXprofile.name}\n            </div>\n\n        <button onClick={()=>setCurrentPage('compose')}> Compose </button>\n\n        <button onClick={()=>{\n            console.log('Logged out.')\n            removeProfile()\n            localStorage.removeItem('storediD');\n            localStorage.removeItem('storedToken');\n            setCurrentPage('posts')\n            }}> Log Out</button>\n\n            {searchField}\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile,\n        reduXcurrentPage: state.page.currentPage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        removeProfile: () => dispatch(removeProfileAction()),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setSearch: text => dispatch(setSearchAction(text)),\n        setSearchResults: payload => dispatch(setSearchResultsAction(payload))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar)","import React, {useState, useRef} from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {connect} from 'react-redux'\nimport {registerRequest} from '../utilities/Requests'\nimport '../../styles/Register.css';\nimport {setProfileAction} from '../../reduxStore/actions/profile'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Register = props => {\n    const {setProfile, setCurrentPage, setErrorMessage} = props\n    const [registerInfo, setRegisterInfo] = useState();\n    const rePasswordEl = useRef();\n\n    // when submit button is pressed\n    const handleSubmit = event => {\n        console.log(registerInfo)\n        event.preventDefault()\n\n        const everythingNotFilled = !registerInfo || !registerInfo.name || !registerInfo.password || !registerInfo.rePassword || !registerInfo.color;\n\n        if(everythingNotFilled){\n            setErrorMessage('Error: You have to fill out all fields')\n        }\n        else {\n            const passwordsDontMatch = registerInfo.password !== registerInfo.rePassword\n\n            const nameHasBlank = registerInfo.name.split('').includes(' ')\n\n            if(passwordsDontMatch){\n                rePasswordEl.current.style.backgroundColor = \"#FFE1E1\";\n                setErrorMessage('Error: Passwords do not match')\n            }\n            else if(nameHasBlank) {\n                setErrorMessage('Error: Name can\\'t have any spaces')\n            }\n            else {\n                rePasswordEl.current.style.backgroundColor = \"white\";\n                server_RegisterRequest()\n            }\n        }\n    }\n\n    // send request to register user\n    const server_RegisterRequest = async () =>{\n        const response = await registerRequest(registerInfo)\n        if(typeof(response)=='string'){\n            console.log(response)\n            setErrorMessage(response)\n        } else {\n            console.log('Log in was successful')\n            setProfile(response)\n            setCurrentPage('posts')\n        }\n    }\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13) {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className='registerForm' onKeyDown={onEnterPress}>\n            <input\n                type='text'\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    name : e.target.value.toLowerCase().trim()\n                })}\n            />\n            <input\n                type='password'\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    password : e.target.value.trim()\n                })}\n            />\n            <input\n                type='password'\n                name=\"rePassword\"\n                ref={rePasswordEl}\n                placeholder=\"Re-enter your password\"\n                onChange={(e)=> setRegisterInfo({\n                    ...registerInfo,\n                    rePassword : e.target.value.trim()\n                })}\n            />\n\n            <div className='color-btns'>\n                <div className='color-btns-label'>\n                    <p> Choose a color: </p>\n                </div>\n                <div className='color-btns-choices'>\n                <TwitterPicker\n                    triangle='hide'\n                    onChangeComplete={(color, event)=>{\n                        setRegisterInfo({\n                            ...registerInfo,\n                            color : color.hex\n                        })\n                }}/>\n                </div>\n            </div>\n\n\n            <div className='btns'>\n                <button onClick={()=> {\n                    setCurrentPage('posts')\n                    setErrorMessage(null)\n                    }}> Cancel </button>\n                <button className='btns submit'type='submit'>Submit</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setProfile: profile => dispatch(setProfileAction(profile)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","import React from 'react'\n\nconst SinglePage = props => {\n    return (<div>single page</div>)\n}\n\nexport default SinglePage","import {getPostsRequest, getUsersRequest} from '../../components/utilities/Requests'\n\nexport const addPostsAction = (posts) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'ADD_POSTS',\n\t\t\tpayload: posts\n\t\t})\n\t}\n}\n\nexport const addUsersAction = (users) => {\n\treturn (dispatch, getState) => {\n\t\tdispatch({\n\t\t\ttype: 'ADD_USERS',\n\t\t\tpayload: users\n\t\t})\n\t}\n}\n\nexport const updateAllPostsAction = () => {\n\treturn async (dispatch, getState) => {\n\t\tconst requestedPosts =  await getPostsRequest()\n\n\t\t// if(typeof requestedPosts === 'string'){\n\t\t// \tsetErrorMessage('There was a connection error with the DB.')\n\t\t// \treduXaddPosts([])\n\t\t// }\n\n\n\t\tdispatch({\n\t\t\ttype: 'UPDATE_ALL_POSTS',\n\t\t\tpayload: requestedPosts\n\t\t})\n\t}\n}\n\nexport const updateAllUsersAction = () => {\n\treturn async (dispatch, getState) => {\n\t\tconst requestedUsers =  await getUsersRequest()\n\n\t\t// if(typeof requestedPosts === 'string'){\n\t\t// \tsetErrorMessage('There was a connection error with the DB.')\n\t\t// \treduXaddPosts([])\n\t\t// }\n\n\t\tconst storediD = localStorage.getItem('storediD');\n\t\tconst storedToken = localStorage.getItem('storedToken');\n\n\t\tif(storediD){\n\t\t\tconst f = requestedUsers.find(user=> user._id === storediD)\n\t\t\tdispatch({\n\t\t\t\ttype: 'ADD_PROFILE',\n\t\t\t\tpayload: {...f, token:storedToken}\n\t\t\t})\n\t\t}\n\n\n\t\tdispatch({\n\t\t\ttype: 'UPDATE_ALL_USERS',\n\t\t\tpayload: requestedUsers\n\t\t})\n\t}\n}","import React from 'react'\nimport { FaRegHeart } from \"react-icons/fa\"\nimport {likeRequest, dislikeRequest} from '../utilities/Requests'\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction} from '../../reduxStore/actions/mongoDb'\n\nconst LikeButton = props => {\n    const {reduXprofile, updateAllPosts} = props\n    const {post} = props;\n\n    const server_AddLike = async (e) => {\n        e.preventDefault()\n\n        const response = await likeRequest({\n            token:reduXprofile.token,\n            _id:post._id\n        })\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Like was added.')\n            updateAllPosts()\n        }\n    }\n\n    const server_RemoveLike = async (e) => {\n        e.preventDefault()\n\n        const response = await dislikeRequest({\n            token:reduXprofile.token,\n            _id:post._id\n        })\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Like was removed.')\n            updateAllPosts()\n        }\n    }\n\n    // if user is able to like, make it red\n    let style = {};\n\n    const userDidntLikedBefore = reduXprofile && post.authorId !== reduXprofile._id && !post.likes.includes(reduXprofile._id)\n\n    const userLikedBefore = reduXprofile && post.authorId !== reduXprofile._id && post.likes.includes(reduXprofile._id)\n\n    if(userDidntLikedBefore){\n        style = {color:'black', cursor:'pointer', opacity:1}\n    }\n\n    else if(userLikedBefore){\n        style = {color:'red', cursor:'pointer', opacity:1}\n    }\n\n    return (\n        <button className=\"like\" onClick={event=>{\n            if(userDidntLikedBefore){\n                server_AddLike(event)\n            }\n            else if(userLikedBefore){\n                server_RemoveLike(event)\n            }\n        }} style={style}>\n            <label>{post.likes.length}</label>\n            <FaRegHeart className='heart'/>\n        </button>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateAllPosts: () => dispatch(updateAllPostsAction())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LikeButton)","import React from 'react'\nimport {deleteRequest} from '../utilities/Requests'\nimport {connect} from 'react-redux'\nimport {updateAllPostsAction} from '../../reduxStore/actions/mongoDb'\n\nconst DeleteButton = props => {\n    const {reduXprofile, updateAllPosts} = props\n    const {profile, post} = props\n\n    // handle delete button pressed\n    const handleDeleteClick = async e => {\n        e.preventDefault()\n        server_DeleteRequest()\n    }\n\n    const server_DeleteRequest = async () => {\n        const response =  await deleteRequest({\n            token:reduXprofile.token,\n            _id:post._id\n        })\n\n        if(response !== 'OK'){\n            console.log(response)\n        }\n        else {\n            console.log('Post was successfully deleted.')\n            updateAllPosts()\n        }\n    }\n\n    return (\n        <button\n            className=\"delete\"\n            onClick={handleDeleteClick}>\n        Delete\n        </button>\n        )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateAllPosts: () => dispatch(updateAllPostsAction())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteButton)","import React from 'react'\nimport {connect} from 'react-redux'\n\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport {singlepostRequest} from '../utilities/Requests'\nimport {setSearchAction, setCurrentPageAction} from '../../reduxStore/actions/page'\nimport {updateAllPostsAction} from '../../reduxStore/actions/mongoDb'\n\nconst Post = props => {\n    const {setSearch, allUsers, reduXprofile, setCurrentPage} = props\n    const {post, profile} = props\n\n    let authorProfile = allUsers.find(user => user._id === post.authorId)\n\n    if(!authorProfile){\n        authorProfile = {\n            name:'User no longer exists',\n            color: 'red'\n        }\n    }\n\n\n    const getFinalText = (postText, allUsers) => {\n        return (\n            <>\n            {postText.split(/\\s+/).map(word => {\n    \n                if(word.startsWith('#')){\n                    return (\n                        <button\n                            onClick={()=>hashtagClick(word)}\n                            className='hashtag'\n                        >\n                        {word}\n                        </button>)\n                } \n                else if(word.startsWith('@')){\n                    const mentioned = allUsers.find(user=> user.name === word.toLowerCase().substring(1))\n    \n                    let style={}\n    \n                    if(mentioned){\n                        style = {background:mentioned.color, color: 'black'}\n                    }\n    \n    \n                    return (<button\n                                style={style}\n                                className='hashtag'\n                                >\n                                {word}\n                                </button>)\n                }\n    \n                else {\n                    return word + ' '\n                }\n            })}\n            </>\n        )\n    }\n\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    const postClick = async () => {\n        const res = await singlepostRequest(post._id)\n        console.log('single page post')\n        console.log(res)\n        setCurrentPage('single-page')\n    }\n\n    const hashtagClick = hashtag => {\n        console.log('hashtag', hashtag)\n        setSearch(hashtag)\n    }\n\n    return (\n    <li className='post'>\n        <div className='post-header'>\n            <div className='info-name'>\n                <div className='icon-color' style={{background:authorProfile.color}} />\n                <h3>{authorProfile.name}</h3>\n            </div>\n            <LikeButton {...{\n                profile,\n                post\n                }}\n            />\n        </div>\n\n        <div className='post-body'>\n            <p className='text'>{getFinalText(post.payload, allUsers)}</p>\n        </div>\n\n        <div className='post-footer'>\n            <div className='date-comments'>\n                <p className='date'>{getFullDate(post.date)}</p>\n                <el onClick={postClick} className='comments'>\n                    Comments\n                </el>\n            </div>\n            {reduXprofile && reduXprofile._id === post.authorId?\n            <DeleteButton {...{\n                profile,\n                post\n            }}/> : ''\n            }\n\n        </div>\n    </li>\n    )\n}\n\nconst getFullDate = (postDate) => {\n    const months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    const d = new Date(postDate)\n    const date =`${months[d.getMonth()]} ${d.getDate()}, ${d.getFullYear()}`\n    const timeHours = d.getHours() > 12 ? d.getHours() - 12 : d.getHours()\n    const timeMinutes = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes()\n    const ampm = d.getHours() >= 12 ? 'pm' : 'am';\n    return `${date} | ${timeHours}:${timeMinutes} ${ampm}`\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts: state.mongoDb.allPosts,\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setSearch: text => dispatch(setSearchAction(text)),\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        updateAllPosts: () => dispatch(updateAllPostsAction())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","import React from 'react';\nimport _ from 'lodash'\n\nimport Post from './post/Post'\nimport '../styles/Posts.css';\nimport {connect} from 'react-redux'\n\nconst Posts = props => {\n    const {allPosts, searchResults} = props\n    const {profile, addPost} = props\n\n    let postsToShow = allPosts;\n    if(searchResults) { postsToShow = searchResults }\n\n    if(!_.isEmpty(postsToShow)){\n        return (\n            <ul>\n            {\n                postsToShow.slice(0).reverse().map(post => <Post\n                        key={post._id}\n                        {...{\n                            profile,\n                            post,\n                            addPost\n                        }}\n                    />)\n            }\n            </ul>\n            )\n    } else {\n            return (\n                <div className='emptyPosts'>\n                    <img src='https://media.giphy.com/media/26hkhPJ5hmdD87HYA/giphy.gif' alt='none found'/>\n                    <p>Unfortunately there are no posts</p>\n            </div>)\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        allPosts:state.mongoDb.allPosts,\n        searchResults:state.page.searchResults\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts)","import React, {useState, useRef} from 'react'\nimport {composeRequest} from '../utilities/Requests'\nimport '../../styles/Compose.css';\nimport {connect} from 'react-redux'\nimport {setCurrentPageAction, setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Compose = props => {\n    const {reduXprofile, setCurrentPage, setErrorMessage} = props\n    const [compose, setCompose] = useState('');\n    const textAreaEl = useRef();\n    const tweetLength = 120;\n\n    const handleSubmit = async e =>{\n        e.preventDefault()\n        const correctLength = compose.trim().length > 2 && compose.trim().length < tweetLength;\n\n        if(correctLength){\n            server_composeRequest();\n        } else {\n            setErrorMessage('Error: Text is not the right length')\n        }\n    }\n\n    const server_composeRequest = async () => {\n        const response = await composeRequest({\n            token : reduXprofile.token,\n            payload : compose.trim()\n        })\n\n        if(response !== 'OK'){\n            setErrorMessage(response)\n        }\n        else {\n            console.log('Post was created.')\n            setCurrentPage('posts')\n        }\n    }\n\n\n    return (\n        <form className='composeForm' onSubmit={handleSubmit}>\n            <textarea\n                type='text'\n                name=\"text\"\n                placeholder=\"Enter your message\"\n                ref={textAreaEl}\n                onChange={ e => {\n                    setCompose(e.target.value)\n                    if(compose.trim().length>tweetLength){\n                        textAreaEl.current.style.backgroundColor = \"red\";\n                    } else {\n                        textAreaEl.current.style.backgroundColor = \"white\";\n                    }\n                }}\n            />\n            <div className='btns'>\n                <button name=\"cancel\" className='submit' onClick={e => {\n                    e.preventDefault()\n                    setErrorMessage(null)\n                    setCurrentPage('posts')\n                }}>Cancel</button>\n                <button type='submit' name=\"submit\" className='submit'>Submit</button>\n            </div>\n        </form>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        allUsers: state.mongoDb.allUsers,\n        reduXprofile: state.profile\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentPage: page => dispatch(setCurrentPageAction(page)),\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Compose)","import React from 'react'\nimport '../../styles/Errors.css'\nimport {connect} from 'react-redux'\nimport {setErrorMessageAction} from '../../reduxStore/actions/page'\n\nconst Errors = props => {\n    const {reduXerrorMessage, setErrorMessage} = props\n\n    if(reduXerrorMessage){\n        return (\n            <div className='errors' onClick={()=> setErrorMessage(null)}>\n                {reduXerrorMessage}\n            </div>\n        )\n    } else {\n        return <div></div>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        reduXerrorMessage: state.page.errorMessage\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setErrorMessage: message => dispatch(setErrorMessageAction(message))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Errors);","import React, {useState, useEffect} from 'react'\n\nimport {getPostsRequest, getUsersRequest} from './utilities/Requests'\n\nimport LogIn from './actions/LogIn'\nimport Sidebar from './sidebar/Sidebar'\nimport Register from './actions/Register'\nimport SinglePage from './actions/SinglePage'\n\nimport '../styles/App.css';\nimport '../styles/MediaQueries.css';\n\nimport Posts from './Posts'\nimport Compose from './actions/Compose'\nimport Errors from './utilities/Errors'\n\nimport {connect} from 'react-redux'\nimport {addPostsAction, addUsersAction, updateAllPostsAction, updateAllUsersAction} from '../reduxStore/actions/mongoDb'\nimport {setProfileAction} from '../reduxStore/actions/profile'\nimport {setErrorMessageAction} from '../reduxStore/actions/page'\n\nconst App = props => {\n  const {setProfile, reduXcurrentPage, reduXaddPosts, reduXaddUsers, setErrorMessage, updateAllPosts, updateAllUsers} = props\n\n  useEffect(() => {\n    updateAllUsers()\n    updateAllPosts()\n  }, [reduXcurrentPage])\n\n\n  // depending on currentPage show adequate component;\n  let currentComponent\n  switch(reduXcurrentPage) {\n    case 'log-in':\n      currentComponent = <LogIn />\n      break;\n\n    case 'register':\n      currentComponent = <Register />\n      break;\n\n    case 'compose':\n      currentComponent = <Compose />\n      break;\n\n    case 'single-page':\n      currentComponent = <SinglePage />\n      break;\n\n    default:\n      currentComponent = <Posts />\n  }\n\n\n  return (\n  <div className=\"global-app\">\n\n    <Errors />\n\n    <div className='App'>\n      <div className='sidebar'>\n        <Sidebar />\n      </div>\n\n      <div className='container'>\n        {currentComponent}\n      </div>\n    </div>\n  </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  console.log(state)\n\n  return {\n    reduXprofile: state.profile,\n    allUsers: state.mongoDb.allUsers,\n    reduXcurrentPage: state.page.currentPage,\n    reduXerrorMessage: state.page.errorMessage\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reduXaddPosts: posts => dispatch(addPostsAction(posts)),\n    reduXaddUsers: users => dispatch(addUsersAction(users)),\n    setProfile: profile => dispatch(setProfileAction(profile)),\n    setErrorMessage: message => dispatch(setErrorMessageAction(message)),\n    updateAllPosts: () => dispatch(updateAllPostsAction()),\n    updateAllUsers: () => dispatch(updateAllUsersAction())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const initialState = {\n  allPosts: {},\n  allUsers: {}\n}\n\nconst postReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case 'ADD_POSTS':\n      return {\n        ...state,\n        allPosts: action.payload\n      }\n\n    case 'UPDATE_ALL_POSTS':\n      return {\n        ...state,\n        allPosts: action.payload\n      }\n\n    case 'ADD_USERS':\n      return {\n        ...state,\n        allUsers: action.payload\n      }\n\n    case 'UPDATE_ALL_USERS':\n        return {\n          ...state,\n          allUsers: action.payload\n        }\n\n    default:\n      return state\n  }\n}\n\nexport default postReducer","\nexport const initialState = null\n\nconst profileReducer = (state = initialState, action) => {\n\nswitch (action.type) {\n\n    case 'ADD_PROFILE':\n        return {...state, ...action.payload}\n    \n    case 'REMOVE_PROFILE':\n        return null\n\n    default:\n        return state\n\n}}\n\nexport default profileReducer","\nexport const initialState = {\n    currentPage: 'posts'\n}\n\nconst pageReducer = (state = initialState, action) => {\n\nswitch (action.type) {\n    case 'SET_CURRENT_PAGE':\n        return {...state, currentPage: action.currentPage}\n\n    case 'SET_ERROR_MESSAGE':\n        return {...state, errorMessage: action.message}\n\n    case 'SET_SEARCH':\n        return {...state, search: action.text}\n\n    case 'SET_SEARCH_RESULTS':\n        return {...state, searchResults: action.payload}\n\n    default:\n        return state\n}}\n\nexport default pageReducer","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport mongoReducer from './reducers/mongoReducer'\nimport profileReducer from './reducers/profileReducer'\nimport pageReducer from './reducers/pageReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(combineReducers({\n    page: pageReducer,\n    profile: profileReducer,\n    mongoDb: mongoReducer\n}),\ncomposeEnhancers( applyMiddleware(thunk) )\n)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './reduxStore/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}